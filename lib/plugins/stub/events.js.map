{"version":3,"sources":["../../../src/plugins/stub/events.js"],"names":["module","exports","opts","server","io","require","serveClient","wsEngine","port","wsPort","on","socket","console","log","id","args","Date","now","emit"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACvC;;AAEA,MAAMC,KAAKC,QAAQ,WAAR,EAAqBF,MAArB,EAA6B;AACtCG,iBAAa,KADyB;AAEtCC,cAAU,IAF4B,CAEvB;AAFuB,GAA7B,CAAX;;AAKA,MAAMC,OAAON,KAAKO,MAAL,IAAe,IAA5B;;AAEAL,KAAGM,EAAH,CAAM,SAAN,EAAiB,UAAUC,MAAV,EAAkB;AACjCC,YAAQC,GAAR,CAAY,aAAaF,OAAOG,EAAhC;;AAEAH,WAAOD,EAAP,CAAU,OAAV,EAAmB,YAAmB;AAAA,wCAANK,IAAM;AAANA,YAAM;AAAA;;AACpCH,cAAQC,GAAR,CAAYG,KAAKC,GAAL,EAAZ,EAAwBN,OAAOG,EAA/B,EAAmCC,IAAnC;;AAEAJ,aAAOO,IAAP,CAAY,OAAZ,EAAqBH,IAArB;AACD,KAJD;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAY;AAClCE,cAAQC,GAAR,CAAY,gBAAgBF,OAAOG,EAAnC;AACD,KAFD;AAID,GApCD;AAqCD,CA/CD","file":"events.js","sourcesContent":["module.exports = function (opts, server) {\n  // 启动websocket\n\n  const io = require('socket.io')(server, {\n    serveClient: false,\n    wsEngine: 'ws' // uws is not supported since it is a native module\n  });\n\n  const port = opts.wsPort || 3888;\n\n  io.on('connect', function (socket) {\n    console.log('connect ' + socket.id);\n\n    socket.on('hello', function (...args) {\n      console.log(Date.now(), socket.id, args);\n\n      socket.emit('world', args);\n    });\n\n    // 此处遍历生成监听事件\n    // console.log('stubList', stubList);\n    // stubList.forEach((stubData) => {\n    //   const SOCKET_NAME = stubData.target;\n    //\n    //   // 每一个 stub 都监听其特定的消息\n    //   // TODO 此处需要确认如果有多个同样的 SOCKET_NAME，则会发生什么事情，是否需要程序进行提示？\n    //   socket.on(SOCKET_NAME, function (...args) {\n    //     console.log(Date.now(), SOCKET_NAME, socket.id, args);\n    //\n    //     // 获取这个stub的激活状态的module，并返回到客户端\n    //     business.getStubModule(stubBasePath, SOCKET_NAME)\n    //       .then((result) => {\n    //         // console.log('-then-', result);\n    //         socket.emit(SOCKET_NAME, result.data);\n    //       })\n    //       .catch((err) => {\n    //         // console.error('-catch-', err);\n    //         socket.emit('stub_error', err);\n    //       });\n    //   });\n    // });\n\n    socket.on('disconnect', function () {\n      console.log('disconnect ' + socket.id);\n    });\n\n  });\n};\n"]}