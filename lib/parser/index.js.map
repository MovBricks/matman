{"version":3,"sources":["../../src/parser/index.js"],"names":["fs","require","_","path","marked","util","mocker","getAllHandler","basePath","handlerNameArr","file","getAll","globs","forEach","item","isDirectory","push","basename","relativePath","console","error","join","log","handlerArr","handlerName","getHandlerInfo","CUR_HANDLER_PATH","CUR_HANDLE_MODULE_PATH","CUR_HANDLER_CONFIG","existsSync","mockerConfigDB","db","getDB","mockerConfigDBState","getState","route","mockerDBFile","mockerDB","mockerDBState","merge","name","disable","description","activeModule","defaultModule","method","priority","tags","union","modules","mockModuleName","mockModuleDBFile","mockModuleData","mockModuleDB","query","_m_target","length","setState","_fullPath","getCurMocker","jsonFileArr","params","arr","i","dbState","paramsKeyLength","pureOne","j","lengthj","curMockerData","routeExtra","routeExtraKeys","routeExtraKeyLength","isFound","k","field","getMockModule","mockerBasePath","req","mockerData","reject","mockModulePath","mockModuleItem","mockerModuleTool","getResult","then","data","getMockerReadme","mockerName","curMockerPath","mockerReadmeFile","setOptions","renderer","Renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","content","readFileSync","replace","e","stack","updateMocker","newState","module","exports","getMockerList","getMocker"],"mappings":"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","file":"index.js","sourcesContent":["const fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst marked = require('marked');\n\nconst util = require('../util');\nconst mocker = require('../mocker');\n\n/**\n * 获取某个路径下的所有的 handler 信息\n *\n * @param {String} basePath 根路径\n */\nfunction getAllHandler(basePath) {\n    // 1. 获取所有的 handler name\n    let handlerNameArr = [];\n\n    util.file.getAll(basePath, { globs: ['*'] }).forEach((item) => {\n        /**\n         * 限制只处理文件夹类型的\n         * 在根目录下，每个子文件夹就是一个 handler 单位，其名字即为文件夹名字\n         */\n        if (item.isDirectory()) {\n            handlerNameArr.push(path.basename(item.relativePath));\n        } else {\n            // 正常情况下不允许在根目录下有非文件夹的存在，因此此处需要增加错误展示\n            console.error(`${path.join(item.basePath, item.relativePath)} SHOULD BE Directory!`)\n        }\n    });\n\n    // 打印一些结果\n    console.log(handlerNameArr);\n\n    // 2. 根据 handler name 获取该 handler 下的所有 handle_modules\n    let handlerArr = [];\n\n    handlerNameArr.forEach((handlerName) => {\n        handlerArr.push(getHandlerInfo(basePath, handlerName));\n    });\n\n    return handlerArr;\n}\n\n/**\n * 获取指定 handler 的信息，当然包括 handle_modules 信息\n * @param {String} basePath 根路径\n * @param {String} handlerName 指定的 handler 的名字\n */\nfunction getHandlerInfo(basePath, handlerName) {\n    const CUR_HANDLER_PATH = path.join(basePath, handlerName);\n    const CUR_HANDLE_MODULE_PATH = path.join(CUR_HANDLER_PATH, 'handle_modules');\n    const CUR_HANDLER_CONFIG = path.join(CUR_HANDLER_PATH, 'config.json');\n\n    // 注意：handler 的 config.json 可能不存在，此时需要提示错误\n    // 我们需要有个配置文件，用于指导\n    if (!fs.existsSync(CUR_HANDLER_CONFIG)) {\n        console.error(CUR_HANDLER_CONFIG + ' is not exist!');\n        return;\n    }\n\n    // 获取这个 mocker 模块的 config 信息\n    let mockerConfigDB = mocker.db.getDB(CUR_HANDLER_CONFIG);\n    let mockerConfigDBState = mockerConfigDB.getState();\n\n    // 至少得有 route 字段，否则报错\n    if (!mockerConfigDBState.route) {\n        console.error(CUR_HANDLER_CONFIG + ' should define property of \"route\"! ');\n        return;\n    }\n\n    // matman.json 可能不存在，此时新增\n    let mockerDBFile = path.join(CUR_HANDLER_PATH, 'matman.json');\n\n    // 获取这个 mocker 模块的详细信息\n    let mockerDB = mocker.db.getDB(mockerDBFile);\n\n    let mockerDBState;\n\n    if (!fs.existsSync(mockerDBFile)) {\n        mockerDBState = _.merge({}, mockerConfigDBState);\n    } else {\n        mockerDBState = _.merge({}, mockerDB.getState(), mockerConfigDBState);\n    }\n\n    mockerDBState.name = mockerDBState.name || handlerName;\n    mockerDBState.disable = mockerDBState.disable || false;\n    mockerDBState.description = mockerDBState.description || mockerDBState.name;\n    mockerDBState.activeModule = mockerDBState.activeModule || mockerDBState.defaultModule;\n    mockerDBState.method = mockerDBState.method || 'get';\n    mockerDBState.priority = mockerDBState.priority || 0;\n    mockerDBState.tags = _.union(['全部'], mockerDBState.tags || []);\n\n    // 获取当前的 mocker 下的 modules 列表\n    let modules = [];\n    util.file.getAll(CUR_HANDLE_MODULE_PATH, { globs: ['*'] }).forEach((item) => {\n        if (!item.isDirectory()) {\n            console.error('SHOULD BE Directory!', item);\n            return;\n        }\n\n        // 获取模块名\n        let mockModuleName = path.basename(item.relativePath);\n\n        // config.json 的作用是用于用户自定义，拥有最高的优先级\n        let mockModuleDBFile = path.join(CUR_HANDLE_MODULE_PATH, mockModuleName, 'config.json');\n        let mockModuleData;\n\n        if (!fs.existsSync(mockModuleDBFile)) {\n            // config.json不存在，则设置默认值\n            mockModuleData = {};\n        } else {\n            // config.json不存在，则获取这个模块的详细信息\n            let mockModuleDB = mocker.db.getDB(mockModuleDBFile);\n\n            mockModuleData = mockModuleDB.getState();\n        }\n\n        mockModuleData.name = mockModuleData.name || mockModuleName;\n        mockModuleData.description = mockModuleData.description || mockModuleName;\n\n        // TODO 如果是 /id/:id 类型的，则此处可能会有问题，或许还需要把请求值放入到query中\n        mockModuleData.query = _.merge({}, mockModuleData.query, { _m_target: mockModuleName });\n\n        mockModuleData.priority = mockModuleData.priority || 0;\n\n        modules.push(mockModuleData);\n    });\n\n    // 如果不存在默认的activeModule，则设置第一个mock module为默认\n    if (!mockerDBState.activeModule && modules.length) {\n        mockerDBState.activeModule = modules[0].name;\n    }\n\n    // mock module\n    mockerDBState.modules = modules;\n\n    // 更新到 matman.json\n    mockerDB.setState(mockerDBState);\n\n    // 如果是 id/:id 的形式，则params也需要有\n\n    return _.merge({}, mockerDBState, {\n        _fullPath: CUR_HANDLER_PATH,\n    });\n}\n\n\n\nfunction getCurMocker(jsonFileArr, route, params = {}) {\n    let arr = [];\n\n    // 循环查找所有的 matman.json 文件，对比 route 字段，可能会有多个匹配\n    for (let i = 0, length = jsonFileArr.length; i < length; i++) {\n        let item = jsonFileArr[i];\n\n        // 获取每个 mocker 中的 matman.json 文件内容，以便寻找到相同 route 的那个 mocker\n        let db = mocker.db.getDB(path.join(item.basePath, item.relativePath));\n        let dbState = db.getState();\n        // console.log(dbState);\n\n        // 不仅校验 dbState.route ，还需要校验 dbState.routeExtra\n        if (route === dbState.route) {\n            arr.push(dbState);\n        }\n    }\n\n    // 如果只有一个匹配，则一定是它\n    if (arr.length < 2) {\n        return arr[0];\n    }\n\n    let paramsKeyLength = Object.keys(params).length;\n\n    let pureOne;\n\n    // 有多个匹配时，要比对 routeExtra 值\n    for (let j = 0, lengthj = arr.length; j < lengthj; j++) {\n        let curMockerData = arr[j],\n            routeExtra = curMockerData.routeExtra || {},\n            routeExtraKeys = Object.keys(routeExtra),\n            routeExtraKeyLength = routeExtraKeys.length;\n\n        if (!routeExtraKeyLength) {\n            // 如果没有配置限定\n\n            if (!paramsKeyLength) {\n                // 如果请求参数也为空，则就是它了\n                return curMockerData;\n            }\n\n            // 如果请求参数不为空，这个很难判断，但如果没有其他精准匹配结果，则返回它\n            pureOne = curMockerData;\n\n        } else {\n            // 如果配置了限定\n\n            if (!paramsKeyLength) {\n                // 如果请求参数也为空，则肯定不是它\n                continue;\n            }\n\n            let isFound = true;\n\n            // 如果请求参数不为空，则对比参数值\n            for (let k = 0; k < routeExtraKeyLength; k++) {\n                let field = routeExtraKeys[k];\n\n                // 这里都转化为字符串来比较，一旦不相等，则不再判断了\n                if ((routeExtra[field] + '') !== (params[field] + '')) {\n                    isFound = false;\n                    break;\n                }\n            }\n\n            if (isFound) {\n                return curMockerData;\n            }\n        }\n    }\n\n    return pureOne;\n}\n\n/**\n * 根据 route 请求，获取某个 mock module 的结果\n *\n * @param {String} mockerBasePath\n * @param {String} route 当前请求的 route\n * @param {Object} params 请求参数值\n * @param {Object} req req\n * @return {Promise}\n */\nfunction getMockModule(mockerBasePath, route, params, req) {\n    let jsonFileArr = util.file.getAll(mockerBasePath, { globs: ['*/matman.json'] });\n\n    // 匹配 mocker\n    let mockerData = getCurMocker(jsonFileArr, route, params);\n\n    if (!mockerData) {\n        return Promise.reject('UNKNOWN_CGI');\n    }\n\n    // 有可能是指定的 mock module， 也可能是当前的 mock module\n    let mockModuleName = params._m_target ? params._m_target : mockerData.activeModule;\n\n    // 组装获取 mock module 的文件地址\n    let mockModulePath = path.join(mockerBasePath, mockerData.name, 'mock_modules', mockModuleName);\n\n    // 还有部分参数在 mock module 的 query 字段中\n    for (let j = 0, lengthj = mockerData.modules.length; j < lengthj; j++) {\n        let mockModuleItem = mockerData.modules[j];\n        if (mockModuleName === mockModuleItem.name) {\n            params = _.merge({}, mockModuleItem.query, params);\n        }\n    }\n\n    return mocker.mockerModuleTool.getResult(mockModulePath, params, req)\n        .then((data) => {\n            return {\n                data: data,\n                mockerDBState: mockerData,\n                mockModuleName: mockModuleName,\n                params: params,\n            }\n        });\n}\n\n\n/**\n * 获取指定 mocker 的 README 信息\n */\nfunction getMockerReadme(mockerBasePath, mockerName) {\n    let curMockerPath = path.join(mockerBasePath, mockerName);\n\n    let mockerReadmeFile = path.join(curMockerPath, 'readme.md');\n    if (!fs.existsSync(mockerReadmeFile)) {\n        mockerReadmeFile = path.join(curMockerPath, 'readme.MD');\n        if (!fs.existsSync(mockerReadmeFile)) {\n            mockerReadmeFile = path.join(curMockerPath, 'README.md');\n            if (!fs.existsSync(mockerReadmeFile)) {\n                mockerReadmeFile = path.join(curMockerPath, 'README.MD');\n                if (!fs.existsSync(mockerReadmeFile)) {\n                    return '';\n                }\n            }\n        }\n    }\n\n    marked.setOptions({\n        renderer: new marked.Renderer(),\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false\n    });\n\n    try {\n        let content = fs.readFileSync(mockerReadmeFile, 'utf8');\n\n        content = content.replace(/__MOCKER__/g, mockerName);\n\n        return marked(content);\n    } catch (e) {\n        return e.stack;\n    }\n}\n\n/**\n * 更新 mocker 的 信息\n * @param mockerBasePath\n * @param mockerName\n * @param newState\n */\nfunction updateMocker(mockerBasePath, mockerName, newState) {\n    let curMockerPath = path.join(mockerBasePath, mockerName);\n\n    // 获取这个 mocker 模块的详细信息\n    let mockerDB = mocker.db.getDB(path.join(curMockerPath, 'matman.json'));\n\n    // 更新 mocker db 数据\n    let mockerDBState = mockerDB.getState();\n    mockerDBState = _.merge({}, mockerDBState, newState);\n    mockerDB.setState(mockerDBState);\n\n    return mockerDBState;\n}\n\nmodule.exports = {\n    getMockerList: getMockerList,\n    getMocker: getHandlerInfo,\n    getMockerReadme: getMockerReadme,\n    updateMocker: updateMocker,\n    getMockModule: getMockModule\n};\n\n\n"]}