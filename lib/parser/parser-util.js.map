{"version":3,"sources":["../../src/parser/parser-util.js"],"names":["fs","require","_","path","getMixinHandlerData","handlerName","handlerConfigData","cacheData","route","console","error","indexOf","data","merge","description","disable","method","priority","plugin","name","activeModule","defaultModule","tags","union","getMixinHandleModuleData","handleModuleName","handleModuleConfigData","delay","query","_m_target","getMatchedHandler","allHandlerList","params","matchedArr","paramsKeyLength","length","forEach","item","obj","match","routeExtra","routeExtraKeys","routeExtraKeyLength","push","isExistNotMatchedField","routeExtraKey","sort","a","b","module","exports"],"mappings":"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","file":"parser-util.js","sourcesContent":["const fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\n\n/**\n * 获取 handlerData 信息\n *\n * @param {String} handlerName 该 handler 名字\n * @param {Object} handlerConfigData config.json中的数据\n * @param {Object} cacheData 缓存数据\n * @return {Object}\n */\nfunction getMixinHandlerData(handlerName, handlerConfigData, cacheData) {\n  // 至少得有 route 字段，否则报错\n  // 我们是需要 route 字段来匹配的，因此是必须的\n  if (!handlerConfigData.route) {\n    console.error(handlerName + ' should define property of \"route\"! ');\n    return null;\n  }\n\n  // #57 可能route中不以 / 开头\n  if (handlerConfigData.route.indexOf('/') !== 0) {\n    handlerConfigData.route = '/' + handlerConfigData.route;\n  }\n\n  // 始终以 config.json 中定义的为最高优先级（除了defaultModule字段），如果没定义，则使用 cache 值，最后才是默认值\n  let data = _.merge({\n    description: handlerName,\n    disable: false,\n    method: 'get',\n    priority: 0,\n    plugin: 'mocker'\n  }, cacheData, handlerConfigData);\n\n  // 名字不能够再被修改，默认为文件夹名字\n  data.name = handlerName;\n\n  // 当前激活的是哪个 module，优先使用 cache 中\n  data.activeModule = data.activeModule || data.defaultModule;\n\n  // 标签，用于过滤，字符串数组，合并\n  data.tags = _.union(['全部'], data.tags || []);\n\n  return data;\n}\n\n/**\n * 获取 handle_module 信息\n *\n * @param {String} handleModuleName 该 handle_module 名字\n * @param {Object} handleModuleConfigData config.json中的数据\n * @return {Object}\n */\nfunction getMixinHandleModuleData(handleModuleName, handleModuleConfigData) {\n\n  // 始终以 config.json 中定义的为最高优先级（除了defaultModule字段），如果没定义，则使用 cache 值，最后才是默认值\n  let data = _.merge({\n    description: handleModuleName,\n    priority: 0,\n    delay: 0\n  }, handleModuleConfigData);\n\n  // 名字不能够再被修改，默认为文件夹名字\n  data.name = handleModuleName;\n\n  // TODO 如果是 /id/:id 类型的，则此处可能会有问题，或许还需要把请求值放入到query中\n  data.query = _.merge({}, data.query, { _m_target: handleModuleName });\n\n  return data;\n}\n\n/**\n * 获取匹配路由的 Handler 信息\n *\n * @param {Array} allHandlerList 所有的 handler 列表\n * @param {String} route 路由规则\n * @param {Object} [params] 请求的参数\n * @return {Object}\n *\n */\nfunction getMatchedHandler(allHandlerList, route, params = {}) {\n  let matchedArr = [];\n  let paramsKeyLength = Object.keys(params).length;\n\n  allHandlerList.forEach((item) => {\n    // 如果连 route 都没匹配，则无需后续处理\n    if (route !== item.route) {\n      return;\n    }\n\n    let obj = {\n      match: 1,\n      data: item\n    };\n\n    let routeExtra = item.routeExtra || {},\n      routeExtraKeys = Object.keys(routeExtra),\n      routeExtraKeyLength = routeExtraKeys.length;\n\n    // 如果 routeExtra 为空，则放入数组中之后，无须再后续处理\n    if (!routeExtraKeyLength) {\n      matchedArr.push(obj);\n      return;\n    }\n\n    // 如果 routeExtra 不为空，但请求参数为空，则肯定是匹配失败了的，无须放入数组\n    if (routeExtraKeyLength && !paramsKeyLength) {\n      return;\n    }\n\n    let isExistNotMatchedField = false;\n\n    // 如果 routeExtra 不为空，且请求参数也为空，则为其计算匹配度\n    routeExtraKeys.forEach((routeExtraKey) => {\n      // 注意，这里都转化为字符串来比较\n      if ((routeExtra[routeExtraKey] + '') === (params[routeExtraKey] + '')) {\n        obj.match++;\n      } else {\n        // 如果定义了 routeExtra，就要全匹配，有一个不匹配都不行\n        isExistNotMatchedField = true;\n      }\n    });\n\n    if (!isExistNotMatchedField) {\n      matchedArr.push(obj);\n    }\n  });\n\n  return matchedArr.length ? matchedArr.sort((a, b) => {\n    return b.match - a.match;\n  })[0].data : null;\n\n}\n\nmodule.exports = {\n  getMixinHandlerData: getMixinHandlerData,\n  getMixinHandleModuleData: getMixinHandleModuleData,\n  getMatchedHandler: getMatchedHandler\n};\n"]}