{"version":3,"sources":["../../src/parser/handler-parser2.js"],"names":["fs","require","fse","_","path","marked","fsHandler","matmanCore","util","store","parserUtil","HandlerParser","entry","appHandlerPath","join","APP_PATH","MOCKER_BASE_PATH","HANDLERS_RELATIVE_PATH","srcHandlerPath","SRC_PATH","basePath","definedHandlers","dbPath","handleModulesFolderName","handlerConfigName","handleModuleConfigName","targetField","db","getDB","parseAndSave","allHandler","getAllHandler","setState","data","write","isReset","get","value","search","getAll","globs","forEach","item","isDirectory","name","basename","relativePath","serialize","relative","__dirname","indexOf","replace","push","console","error","log","handlerArr","handlerInfo","getHandler","handlerName","cacheData","find","curDefinedHandler","getDefinedHandler","config","handlerData","getMixinHandlerData","CUR_HANDLER_PATH","modules","handleModules","length","indexModule","description","priority","type","query","_m_target","existsSync","fileName","curHandleModuleData","getMixinHandleModuleData","activeModule","map","getHandlerByRoute","route","params","getMatchedHandler","getHandlerListByPlugin","pluginName","filter","plugin","getHandleModule","handleModuleName","_getHandleModuleByHandler","getHandleModuleResultForHttp","req","reqInfoByRoute","getReqInfoByRoute","reject","handle","getTargetResult","requiredModule","then","extra","getHandleModuleResult","props","getModuleResult","fullPath","handleModuleInfo","moduleRelativePath","moduleFullPath","reqParams","merge","definedHandleModule","getDefinedHandleModule","module","updateHandler","updateData","assign","getReadMeContent","curMockerPath","PATH","handlerReadMeFile","setOptions","renderer","Renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","content","readFileSync","e","stack","moduleName","i","mockModuleItem"],"mappings":"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","file":"handler-parser2.js","sourcesContent":["const fs = require('fs');\nconst fse = require('fs-extra');\nconst _ = require('lodash');\nconst path = require('path');\nconst marked = require('marked');\nconst fsHandler = require('fs-handler');\nconst matmanCore = require('matman-core');\n\nconst util = require('../util');\nconst store = require('../store');\n\nconst parserUtil = require('./parser-util');\n\nexport default class HandlerParser {\n  constructor(entry) {\n    this.appHandlerPath = path.join(entry.APP_PATH, entry.MOCKER_BASE_PATH,  entry.HANDLERS_RELATIVE_PATH);\n    this.srcHandlerPath = path.join(entry.SRC_PATH,  entry.MOCKER_BASE_PATH, entry.HANDLERS_RELATIVE_PATH);\n    this.basePath = this.appHandlerPath;\n    this.definedHandlers = [...entry.definedHandlers];\n\n    this.dbPath = entry.APP_PATH;\n    this.handleModulesFolderName = 'handle_modules';\n    this.handlerConfigName = 'config.json';\n    this.handleModuleConfigName = 'config.json';\n    this.targetField = '_m_target';\n\n    // 注意此处一定要保证存储数据的地址是可存在的，否则会保存失败。\n    // fse.ensureDirSync(this.dbPath);\n\n    this.db = store.getDB(path.join(this.dbPath, 'db.json'));\n  }\n\n  /**\n   * 分析并保存数据到本地\n   */\n  parseAndSave() {\n    // 获取本地所有的 handler 列表。注意此处不能够取自缓存，要重新去分析。\n    let allHandler = this.getAllHandler(true);\n\n    // 存储到本地缓存数据文件内，以便下次启动时能够记录上一次的操作\n    this.db.setState({\n      basePath: this.basePath,\n      srcHandlerPath: this.srcHandlerPath,\n      appHandlerPath: this.appHandlerPath,\n      data: allHandler\n    }).write();\n\n    // 将结果返回\n    return allHandler;\n  }\n\n  /**\n   * 获取所有的 handler 信息\n   *\n   * @param {boolean} [isReset] 是否为重置，如果为true，则将忽略缓存数据\n   * @return {Array}\n   */\n  getAllHandler(isReset) {\n    // 默认情况下，handler列表的数据直接从缓存中获取，除非指定了 isReset=true。\n    if (!isReset) {\n      return this.db.get('data').value() || [];\n    }\n\n    // 1. 获取所有的 handler\n    fsHandler.search.getAll(this.basePath, { globs: ['*'] }).forEach((item) => {\n      /**\n       * 限制只处理文件夹类型的\n       * 在根目录下，每个子文件夹就是一个 handler 单位，其名字即为文件夹名字\n       */\n      if (item.isDirectory()) {\n        let name = path.basename(item.relativePath);\n\n        // 将模块进行序列化处理\n        matmanCore.serialize(path.join(this.srcHandlerPath, name), path.join(this.appHandlerPath, name));\n\n        // 获得相对路径，以便 require 到 definedHandlers 中\n        let relativePath = path.relative(__dirname, path.join(this.appHandlerPath, name));\n\n        // 当路径是 './' 开头时，这里的结果会将其省略，因此要再加回来，否则 require 时会先去 node_modules 寻找，就会产生问题\n        relativePath = relativePath.indexOf('..') > -1 ? relativePath : './' + relativePath;\n\n        // 需要将“\\”替换为“/”\n        relativePath = relativePath.replace(/\\\\/gi, '/');\n\n        // 把处理之后的模块加入到 definedHandlers 中\n        this.definedHandlers.push(require(relativePath));\n      } else {\n        // 正常情况下不允许在根目录下有非文件夹的存在，因此此处需要增加错误展示\n        console.error(`${path.join(item.basePath, item.relativePath)} SHOULD BE Directory!`);\n      }\n    });\n\n    // 打印一些结果\n    console.log(this.definedHandlers);\n\n    // 2. 根据 handler name 获取该 handler 下的所有 handle_modules\n    let handlerArr = [];\n\n    this.definedHandlers.forEach((item) => {\n      let handlerInfo = this.getHandler(item.name, true);\n\n      // 有可能该 handler 不合法，只有合法的 handler 才进行处理\n      if (handlerInfo) {\n        handlerArr.push(handlerInfo);\n      }\n    });\n\n    return handlerArr;\n  }\n\n  /**\n   * 通过名字获取 handler 的信息，当然包括 handle_modules 信息\n   *\n   * @param {String} handlerName 指定的 handler 的名字\n   * @param {Boolean} [isReset] 是否为重置，如果为true，则将忽略缓存数据\n   * @return {Object}\n   */\n  getHandler(handlerName, isReset) {\n    //===============================================================\n    // 1. 从缓存数据库中获取 handler 数据\n    //===============================================================\n    let cacheData = this.db.get('data').find({ name: handlerName }).value();\n\n    // 默认情况下，handler列表的数据直接从缓存中获取，除非指定了 isReset=true。\n    if (!isReset) {\n      return cacheData;\n    }\n\n    //===============================================================\n    // 2. 获取 definedHandler 信息\n    //===============================================================\n    let curDefinedHandler = this.getDefinedHandler(handlerName);\n    if (!curDefinedHandler || !curDefinedHandler.config) {\n      console.error(handlerName + ' invalid!', curDefinedHandler);\n      return null;\n    }\n\n    //===============================================================\n    // 3. 以一定的方式， 获取 handler 模块最终信息\n    //===============================================================\n    let handlerData = parserUtil.getMixinHandlerData(handlerName, curDefinedHandler.config, cacheData);\n\n    // TODO 如果匹配规则一模一样，需要进行警告提示！！！！！\n    if (!handlerData) {\n      return null;\n    }\n\n    //===============================================================\n    // 4. 获取当前的 handler 下的 handle_modules 列表，或者 index.js/index.json\n    //===============================================================\n    const CUR_HANDLER_PATH = path.join(this.basePath, handlerName);\n    let modules = [];\n\n    if (!curDefinedHandler.handleModules.length) {\n      // 如果没有 handle_modules 文件夹，则使用 index.js 或者 index.json，且将其设置为默认\n      let indexModule = {\n        name: 'index_module',\n        description: 'default module',\n        priority: 0,\n        type: 'noModule'\n      };\n\n      indexModule.query = { _m_target: indexModule.name };\n\n      if (fs.existsSync(path.join(CUR_HANDLER_PATH, 'index.js'))) {\n        indexModule.fileName = 'index.js';\n      } else if (fs.existsSync(path.join(CUR_HANDLER_PATH, 'index.json'))) {\n        indexModule.fileName = 'index.json';\n      } else {\n        return null;\n      }\n\n      modules.push(indexModule);\n\n    } else {\n      curDefinedHandler.handleModules.forEach((item) => {\n        // 获取最后处理之后的数据\n        let curHandleModuleData = parserUtil.getMixinHandleModuleData(item.name, item.config || {});\n\n        modules.push(curHandleModuleData);\n      });\n    }\n\n    // handle_modules 列表\n    handlerData.modules = modules;\n\n    //===============================================================\n    // 5. 其他默认处理\n    //===============================================================\n\n    // 如果不存在默认的 activeModule，或者存在默认的 activeModule，但是它是一个非法值，则设置第一个 handle_module 为默认\n    if ((!handlerData.activeModule || (modules.map(item => item.name).indexOf(handlerData.activeModule) < 0)) && modules.length) {\n      handlerData.activeModule = modules[0].name;\n    }\n\n    //===============================================================\n    // 6. 合并返回\n    //===============================================================\n\n    return handlerData;\n  }\n\n  /**\n   * 通过路由及请求参数获取 handler 的信息\n   *\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @return {Object}\n   */\n  getHandlerByRoute(route, params = {}) {\n    return parserUtil.getMatchedHandler(this.getAllHandler(), route, params);\n  }\n\n  /**\n   * 获取某个 plugin 所有的 handler 信息\n   *\n   * @param {String} [pluginName] 插件名字\n   * @return {Array}\n   */\n  getHandlerListByPlugin(pluginName = 'mocker') {\n    return this.db.get('data').filter({ plugin: pluginName }).value() || [];\n  }\n\n  /**\n   * 通过名字获取 handle_module 的信息\n   *\n   * @param {String} handlerName 指定的 handler 的名字\n   * @param {String} handleModuleName 指定的 handle_module 的名字\n   * @param {Boolean} [isReset] 是否为重置，如果为true，则将忽略缓存数据\n   * @return {Object}\n   */\n  getHandleModule(handlerName, handleModuleName, isReset) {\n    let handlerInfo = this.getHandler(handlerName, isReset);\n\n    return this._getHandleModuleByHandler(handlerInfo, handleModuleName);\n  }\n\n  /**\n   * 根据路由和请求参数，获得目标的执行结果，专为 http 请求\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @param {Object} [req] 请求对象\n   * @return {Promise}\n   */\n  getHandleModuleResultForHttp(route, params = {}, req) {\n    let reqInfoByRoute = this.getReqInfoByRoute(route, params);\n\n    if (!reqInfoByRoute) {\n      return Promise.reject('Could not get reqInfo by route=' + route + ' and params=' + JSON.stringify(params));\n    }\n\n    console.log('==reqInfoByRoute==', reqInfoByRoute);\n\n    return fsHandler.handle.getTargetResult(reqInfoByRoute.requiredModule, reqInfoByRoute.params, req)\n      .then((data) => {\n        return {\n          data: data,\n          extra: reqInfoByRoute\n        };\n      });\n  }\n\n  /**\n   * 根据路由，获得目标的执行结果\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @param props\n   * @return {Promise}\n   */\n  getHandleModuleResult(route, params, ...props) {\n    let reqInfoByRoute = this.getReqInfoByRoute(route, params);\n\n    if (!reqInfoByRoute) {\n      return Promise.reject();\n    }\n\n    return fsHandler.handle.getModuleResult(reqInfoByRoute.fullPath, params, ...props);\n  }\n\n  /**\n   * 通过路由匹配获取到本地模块路径和完整的请求信息\n   *\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @return {Object}\n   */\n  getReqInfoByRoute(route, params = {}) {\n    // 获得当前的 handler 信息\n    let handlerInfo = this.getHandlerByRoute(route, params);\n\n    if (!handlerInfo) {\n      return null;\n    }\n\n    // 优先获取 param 中请求的指定 handle_module，其次是 handerInfo.activeModule\n    let handleModuleName = params[this.targetField] || handlerInfo.activeModule;\n\n    let handleModuleInfo = this._getHandleModuleByHandler(handlerInfo, handleModuleName);\n\n    if (!handleModuleInfo) {\n      return null;\n    }\n\n    // 目标模块的路径，需要注意下 no module 的场景\n\n    let moduleRelativePath = (handleModuleInfo.type && handleModuleInfo.type === 'noModule') ? handleModuleInfo.fileName : path.join(this.handleModulesFolderName, handleModuleName);\n\n    let moduleFullPath = path.join(this.basePath, handlerInfo.name, moduleRelativePath);\n\n    // 还有部分参数在 handle_module 的 query 字段中，需要合并请求\n    let reqParams = _.merge({}, handleModuleInfo.query, params);\n\n    let definedHandleModule = this.getDefinedHandleModule(handlerInfo.name, handleModuleInfo.name);\n    let requiredModule = definedHandleModule ? definedHandleModule.module : null;\n\n    return {\n      handlerInfo: handlerInfo,\n      handleModuleInfo: handleModuleInfo,\n      fullPath: moduleFullPath,\n      params: reqParams,\n      definedHandleModule: definedHandleModule,\n      requiredModule: requiredModule\n    };\n  }\n\n  /**\n   * 更新 handler 的 信息\n   *\n   * @param {String} handlerName handler 名字\n   * @param {Object} [updateData] 要更新的数据\n   */\n  updateHandler(handlerName, updateData) {\n    // 更新数据\n    this.db.get('data')\n      .find({ name: handlerName })\n      .assign(updateData)\n      .write();\n\n    // 返回新的结果\n    return this.getHandler(handlerName);\n  }\n\n  /**\n   * 获取指定 handler 的 README 信息\n   */\n  getReadMeContent(handlerName) {\n    let curDefinedHandler = this.getDefinedHandler(handlerName);\n    if (!curDefinedHandler) {\n      return '异常错误，找不到对应信息！handlerName=' + handlerName;\n    }\n\n    let curMockerPath = curDefinedHandler.PATH;\n\n    let handlerReadMeFile = path.join(curMockerPath, 'readme.md');\n    if (!fs.existsSync(handlerReadMeFile)) {\n      handlerReadMeFile = path.join(curMockerPath, 'readme.MD');\n      if (!fs.existsSync(handlerReadMeFile)) {\n        handlerReadMeFile = path.join(curMockerPath, 'README.md');\n        if (!fs.existsSync(handlerReadMeFile)) {\n          handlerReadMeFile = path.join(curMockerPath, 'README.MD');\n          if (!fs.existsSync(handlerReadMeFile)) {\n            return '';\n          }\n        }\n      }\n    }\n\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    });\n\n    try {\n      let content = fs.readFileSync(handlerReadMeFile, 'utf8');\n\n      content = content.replace(/__STATIC_PATH__/g, handlerName + '/static');\n\n      return marked(content);\n    } catch (e) {\n      return e.stack;\n    }\n  }\n\n  /**\n   * 获取序列化处理之后的 handler 信息\n   * @param handlerName\n   * @return {*}\n   */\n  getDefinedHandler(handlerName) {\n    try {\n      return this.definedHandlers.filter(item => item.name === handlerName)[0];\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * 获取序列化之后 handle_module\n   * @param handlerName\n   * @param moduleName\n   * @return {null}\n   */\n  getDefinedHandleModule(handlerName, moduleName) {\n    try {\n      return this.getDefinedHandler(handlerName).handleModules.filter(item => item.name === moduleName)[0];\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * 从 handlerInfo 对象中获得指定的 handle_module 信息\n   *\n   * @param {Object} handlerInfo\n   * @param {String} handleModuleName\n   * @return {Object}\n   * @private\n   */\n  _getHandleModuleByHandler(handlerInfo, handleModuleName) {\n    if (!handlerInfo || !handlerInfo.modules || !handlerInfo.modules.length || !handleModuleName) {\n      return null;\n    }\n\n    let handleModuleInfo = null;\n\n    for (let i = 0, length = handlerInfo.modules.length; i < length; i++) {\n      let mockModuleItem = handlerInfo.modules[i];\n\n      if (handleModuleName === mockModuleItem.name) {\n        handleModuleInfo = mockModuleItem;\n        break;\n      }\n    }\n\n    return handleModuleInfo;\n  }\n}"]}