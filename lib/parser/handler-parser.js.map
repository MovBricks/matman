{"version":3,"sources":["../../src/parser/handler-parser.js"],"names":["fs","require","fse","_","path","marked","fsHandler","util","store","parserUtil","HandlerParser","basePath","dataPath","handleModulesFolderName","handlerConfigName","handleModuleConfigName","targetField","ensureDirSync","db","getDB","join","parseAndSave","allHandler","getAllHandler","setState","data","write","isReset","get","value","handlerNameArr","search","getAll","globs","forEach","item","isDirectory","push","basename","relativePath","console","error","handlerArr","handlerName","handlerInfo","getHandler","cacheData","find","name","CUR_HANDLER_PATH","CUR_HANDLER_CONFIG","existsSync","handlerConfigData","getState","handlerData","getMixinHandlerData","CUR_HANDLE_MODULE_PATH","modules","indexModule","description","priority","type","query","_m_target","fileName","handleModuleConfigDBState","curHandleModuleName","CUR_HANDLE_MODULE_CONFIG","extname","curHandleModuleData","getMixinHandleModuleData","activeModule","map","indexOf","length","getHandlerByRoute","route","params","getMatchedHandler","getHandlerListByPlugin","pluginName","filter","plugin","getHandleModule","handleModuleName","_getHandleModuleByHandler","getHandleModuleResult","req","reqInfoByRoute","getReqInfoByRoute","reject","handle","getModuleResult","fullPath","then","extra","handleModuleInfo","moduleRelativePath","moduleFullPath","reqParams","merge","updateHandler","updateData","assign","getReadMeContent","curMockerPath","handlerReadMeFile","setOptions","renderer","Renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","content","readFileSync","replace","e","stack","i","mockModuleItem"],"mappings":"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","file":"handler-parser.js","sourcesContent":["const fs = require('fs');\nconst fse = require('fs-extra');\nconst _ = require('lodash');\nconst path = require('path');\nconst marked = require('marked');\nconst fsHandler = require('fs-handler');\n\nconst util = require('../util');\nconst store = require('../store');\n\nconst parserUtil = require('./parser-util');\n\nexport default class HandlerParser {\n  constructor(basePath, dataPath) {\n    this.basePath = basePath;\n\n    this.dataPath = dataPath || basePath;\n    this.handleModulesFolderName = 'handle_modules';\n    this.handlerConfigName = 'config.json';\n    this.handleModuleConfigName = 'config.json';\n    this.targetField = '_m_target';\n\n    // 注意此处一定要保证存储数据的地址是可存在的，否则会保存。\n    fse.ensureDirSync(this.dataPath);\n\n    this.db = store.getDB(path.join(this.dataPath, 'db.json'));\n  }\n\n  /**\n   * 分析并保存数据到本地\n   */\n  parseAndSave() {\n    let allHandler = this.getAllHandler(true);\n\n    this.db.setState({\n      basePath: this.basePath,\n      dataPath: this.dataPath,\n      data: allHandler\n    }).write();\n\n    return allHandler;\n  }\n\n  /**\n   * 获取所有的 handler 信息\n   *\n   * @param {boolean} [isReset] 是否为重置，如果为true，则将忽略缓存数据\n   * @return {Array}\n   */\n  getAllHandler(isReset) {\n    // 如果是优先缓存，则直接返回。\n    if (!isReset) {\n      return this.db.get('data').value() || [];\n    }\n\n    // 1. 获取所有的 handler name\n    let handlerNameArr = [];\n\n    fsHandler.search.getAll(this.basePath, { globs: ['*'] }).forEach((item) => {\n      /**\n       * 限制只处理文件夹类型的\n       * 在根目录下，每个子文件夹就是一个 handler 单位，其名字即为文件夹名字\n       */\n      if (item.isDirectory()) {\n        handlerNameArr.push(path.basename(item.relativePath));\n      } else {\n        // 正常情况下不允许在根目录下有非文件夹的存在，因此此处需要增加错误展示\n        console.error(`${path.join(item.basePath, item.relativePath)} SHOULD BE Directory!`);\n      }\n    });\n\n    // 打印一些结果\n    // console.log(handlerNameArr);\n\n    // 2. 根据 handler name 获取该 handler 下的所有 handle_modules\n    let handlerArr = [];\n\n    handlerNameArr.forEach((handlerName) => {\n      let handlerInfo = this.getHandler(handlerName, true);\n\n      // 有可能该 handler 不合法，只有合法的 handler 才进行处理\n      if (handlerInfo) {\n        handlerArr.push(handlerInfo);\n      }\n    });\n\n    return handlerArr;\n  }\n\n  /**\n   * 通过名字获取 handler 的信息，当然包括 handle_modules 信息\n   *\n   * @param {String} handlerName 指定的 handler 的名字\n   * @param {Boolean} [isReset] 是否为重置，如果为true，则将忽略缓存数据\n   * @return {Object}\n   */\n  getHandler(handlerName, isReset) {\n    //===============================================================\n    // 1. 从缓存数据库中获取 handler 数据\n    //===============================================================\n    let cacheData = this.db.get('data').find({ name: handlerName }).value();\n\n    // 如果是优先缓存，则直接返回。\n    if (!isReset) {\n      return cacheData;\n    }\n\n    //===============================================================\n    // 2. 获取这个 handler 模块的 config 信息\n    //===============================================================\n\n    // 如果不需要缓存，则从文件系统中获取并处理\n    const CUR_HANDLER_PATH = path.join(this.basePath, handlerName);\n\n    const CUR_HANDLER_CONFIG = path.join(CUR_HANDLER_PATH, this.handlerConfigName);\n\n    // 注意：handler 的 config.json 可能不存在，此时需要提示错误\n    // 我们需要有个配置文件，用于指导如何匹配规则，因此是必须的\n    if (!fs.existsSync(CUR_HANDLER_CONFIG)) {\n      console.error(CUR_HANDLER_CONFIG + ' is not exist!');\n      return null;\n    }\n\n    let handlerConfigData = store.getDB(CUR_HANDLER_CONFIG).getState();\n\n    //===============================================================\n    // 3. 以一定的方式， 获取 handler 模块最终信息\n    //===============================================================\n    let handlerData = parserUtil.getMixinHandlerData(handlerName, handlerConfigData, cacheData);\n\n    // TODO 如果匹配规则一模一样，需要进行警告提示！！！！！\n    if (!handlerData) {\n      return null;\n    }\n\n    //===============================================================\n    // 4. 获取当前的 handler 下的 handle_modules 列表，或者 index.js/index.json\n    //===============================================================\n    const CUR_HANDLE_MODULE_PATH = path.join(CUR_HANDLER_PATH, this.handleModulesFolderName);\n\n    let modules = [];\n    if (!fs.existsSync(CUR_HANDLE_MODULE_PATH)) {\n      // 如果没有 handle_modules 文件夹，则使用 index.js 或者 index.json，且将其设置为默认\n      let indexModule = {\n        name: 'index_module',\n        description: 'default module',\n        priority: 0,\n        type: 'noModule'\n      };\n\n      indexModule.query = { _m_target: indexModule.name };\n\n      if (fs.existsSync(path.join(CUR_HANDLER_PATH, 'index.js'))) {\n        indexModule.fileName = 'index.js';\n      } else if (fs.existsSync(path.join(CUR_HANDLER_PATH, 'index.json'))) {\n        indexModule.fileName = 'index.json';\n      } else {\n        return null;\n      }\n\n      modules.push(indexModule);\n\n    } else {\n      fsHandler.search.getAll(CUR_HANDLE_MODULE_PATH, { globs: ['*'] }).forEach((item) => {\n        // 获取各个 handle_module 中 config.json 的数据\n        let handleModuleConfigDBState = {};\n        let curHandleModuleName = '';\n\n        if (item.isDirectory()) {\n          // 获取模块名\n          curHandleModuleName = path.basename(item.relativePath);\n\n          // 如果 handle_module 是一个目录，则需要去检查其是否存在 config.json 文件，优先使用它\n          // config.json 的作用是用于用户自定义，拥有最高的优先级\n          let CUR_HANDLE_MODULE_CONFIG = path.join(CUR_HANDLE_MODULE_PATH, curHandleModuleName, this.handleModuleConfigName);\n\n          if (fs.existsSync(CUR_HANDLE_MODULE_CONFIG)) {\n            handleModuleConfigDBState = store.getDB(CUR_HANDLE_MODULE_CONFIG).getState();\n          }\n        } else {\n          // 获取模块名\n          curHandleModuleName = path.basename(item.relativePath, path.extname(item.relativePath));\n        }\n\n        // 获取最后处理之后的数据\n        let curHandleModuleData = parserUtil.getMixinHandleModuleData(curHandleModuleName, handleModuleConfigDBState);\n\n        modules.push(curHandleModuleData);\n      });\n    }\n\n    // handle_modules 列表\n    handlerData.modules = modules;\n\n    //===============================================================\n    // 5. 其他默认处理\n    //===============================================================\n\n    // 如果不存在默认的 activeModule，或者存在默认的 activeModule，但是它是一个非法值，则设置第一个 handle_module 为默认\n    if ((!handlerData.activeModule || (modules.map(item => item.name).indexOf(handlerData.activeModule) < 0)) && modules.length) {\n      handlerData.activeModule = modules[0].name;\n    }\n\n    //===============================================================\n    // 6. 合并返回\n    //===============================================================\n\n    return handlerData;\n  }\n\n  /**\n   * 通过路由及请求参数获取 handler 的信息\n   *\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @return {Object}\n   */\n  getHandlerByRoute(route, params = {}) {\n    return parserUtil.getMatchedHandler(this.getAllHandler(), route, params);\n  }\n\n  /**\n   * 获取某个 plugin 所有的 handler 信息\n   *\n   * @param {String} [pluginName] 插件名字\n   * @return {Array}\n   */\n  getHandlerListByPlugin(pluginName = 'mocker') {\n    return this.db.get('data').filter({ plugin: pluginName }).value() || [];\n  }\n\n  /**\n   * 通过名字获取 handle_module 的信息\n   *\n   * @param {String} handlerName 指定的 handler 的名字\n   * @param {String} handleModuleName 指定的 handle_module 的名字\n   * @param {Boolean} [isReset] 是否为重置，如果为true，则将忽略缓存数据\n   * @return {Object}\n   */\n  getHandleModule(handlerName, handleModuleName, isReset) {\n    let handlerInfo = this.getHandler(handlerName, isReset);\n\n    return this._getHandleModuleByHandler(handlerInfo, handleModuleName);\n  }\n\n  /**\n   * 根据路由和请求参数，获得目标的执行结果\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @param {Object} [req] 请求对象\n   * @return {Promise}\n   */\n  getHandleModuleResult(route, params = {}, req) {\n    let reqInfoByRoute = this.getReqInfoByRoute(route, params);\n\n    if (!reqInfoByRoute) {\n      return Promise.reject();\n    }\n\n    return fsHandler.handle.getModuleResult(reqInfoByRoute.fullPath, reqInfoByRoute.params, req)\n      .then((data) => {\n        return {\n          data: data,\n          extra: reqInfoByRoute\n        };\n      });\n  }\n\n  /**\n   * 通过路由匹配获取到本地模块路径和完整的请求信息\n   *\n   * @param {String} route 路由规则\n   * @param {Object} [params] 请求的参数\n   * @return {Object}\n   */\n  getReqInfoByRoute(route, params = {}) {\n    // 获得当前的 handler 信息\n    let handlerInfo = this.getHandlerByRoute(route, params);\n\n    if (!handlerInfo) {\n      return null;\n    }\n\n    // 优先获取 param 中请求的指定 handle_module，其次是 handerInfo.activeModule\n    let handleModuleName = params[this.targetField] || handlerInfo.activeModule;\n\n    let handleModuleInfo = this._getHandleModuleByHandler(handlerInfo, handleModuleName);\n\n    if (!handleModuleInfo) {\n      return null;\n    }\n\n    // 目标模块的路径，需要注意下 no module 的场景\n\n    let moduleRelativePath = (handleModuleInfo.type && handleModuleInfo.type === 'noModule') ? handleModuleInfo.fileName : path.join(this.handleModulesFolderName, handleModuleName);\n\n    let moduleFullPath = path.join(this.basePath, handlerInfo.name, moduleRelativePath);\n\n    // 还有部分参数在 handle_module 的 query 字段中，需要合并请求\n    let reqParams = _.merge({}, handleModuleInfo.query, params);\n\n    return {\n      handlerInfo: handlerInfo,\n      handleModuleInfo: handleModuleInfo,\n      fullPath: moduleFullPath,\n      params: reqParams\n    };\n  }\n\n  /**\n   * 更新 handler 的 信息\n   *\n   * @param {String} handlerName handler 名字\n   * @param {Object} [updateData] 要更新的数据\n   */\n  updateHandler(handlerName, updateData) {\n    // 更新数据\n    this.db.get('data')\n      .find({ name: handlerName })\n      .assign(updateData)\n      .write();\n\n    // 返回新的结果\n    return this.getHandler(handlerName);\n  }\n\n  /**\n   * 获取指定 handler 的 README 信息\n   */\n  getReadMeContent(handlerName) {\n    let curMockerPath = path.join(this.basePath, handlerName);\n\n    let handlerReadMeFile = path.join(curMockerPath, 'readme.md');\n    if (!fs.existsSync(handlerReadMeFile)) {\n      handlerReadMeFile = path.join(curMockerPath, 'readme.MD');\n      if (!fs.existsSync(handlerReadMeFile)) {\n        handlerReadMeFile = path.join(curMockerPath, 'README.md');\n        if (!fs.existsSync(handlerReadMeFile)) {\n          handlerReadMeFile = path.join(curMockerPath, 'README.MD');\n          if (!fs.existsSync(handlerReadMeFile)) {\n            return '';\n          }\n        }\n      }\n    }\n\n    marked.setOptions({\n      renderer: new marked.Renderer(),\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    });\n\n    try {\n      let content = fs.readFileSync(handlerReadMeFile, 'utf8');\n\n      content = content.replace(/__HANDLER_PATH__/g, handlerName);\n\n      return marked(content);\n    } catch (e) {\n      return e.stack;\n    }\n  }\n\n  /**\n   * 从 handlerInfo 对象中获得指定的 handle_module 信息\n   *\n   * @param {Object} handlerInfo\n   * @param {String} handleModuleName\n   * @return {Object}\n   * @private\n   */\n  _getHandleModuleByHandler(handlerInfo, handleModuleName) {\n    if (!handlerInfo || !handlerInfo.modules || !handlerInfo.modules.length || !handleModuleName) {\n      return null;\n    }\n\n    let handleModuleInfo = null;\n\n    for (let i = 0, length = handlerInfo.modules.length; i < length; i++) {\n      let mockModuleItem = handlerInfo.modules[i];\n\n      if (handleModuleName === mockModuleItem.name) {\n        handleModuleInfo = mockModuleItem;\n        break;\n      }\n    }\n\n    return handleModuleInfo;\n  }\n}"]}