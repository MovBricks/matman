{"version":3,"sources":["../../src/websocket/index.js"],"names":["path","require","business","module","exports","opts","stubBasePath","join","SRC_PATH","STUB_RELATIVE_PATH","stubList","getStubList","server","createServer","io","serveClient","wsEngine","port","wsPort","on","socket","console","log","id","forEach","stubData","SOCKET_NAME","target","args","Date","now","getStubModule","then","result","emit","data","catch","err","listen"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,WAAWD,QAAQ,YAAR,CAAjB;;AAEAE,OAAOC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAIC,eAAeN,KAAKO,IAAL,CAAUF,KAAKG,QAAf,EAAyBH,KAAKI,kBAA9B,CAAnB;;AAEA,MAAIC,WAAWR,SAASS,WAAT,CAAqBL,YAArB,CAAf;;AAEA,MAAMM,SAASX,QAAQ,MAAR,EAAgBY,YAAhB,EAAf;;AAEA,MAAMC,KAAKb,QAAQ,WAAR,EAAqBW,MAArB,EAA6B;AACtCG,iBAAa,KADyB;AAEtCC,cAAU,IAF4B,CAEvB;AAFuB,GAA7B,CAAX;;AAKA,MAAMC,OAAOZ,KAAKa,MAAL,IAAe,IAA5B;;AAEAJ,KAAGK,EAAH,CAAM,SAAN,EAAiB,UAAUC,MAAV,EAAkB;AACjCC,YAAQC,GAAR,CAAY,aAAaF,OAAOG,EAAhC;;AAEA;AACA;AACAb,aAASc,OAAT,CAAiB,UAACC,QAAD,EAAc;AAC7B,UAAMC,cAAcD,SAASE,MAA7B;;AAEA;AACA;AACAP,aAAOD,EAAP,CAAUO,WAAV,EAAuB,YAAmB;AAAA,0CAANE,IAAM;AAANA,cAAM;AAAA;;AACxCP,gBAAQC,GAAR,CAAYO,KAAKC,GAAL,EAAZ,EAAwBJ,WAAxB,EAAqCN,OAAOG,EAA5C,EAAgDK,IAAhD;;AAEA;AACA1B,iBAAS6B,aAAT,CAAuBzB,YAAvB,EAAqCoB,WAArC,EACGM,IADH,CACQ,UAACC,MAAD,EAAY;AAChB;AACAb,iBAAOc,IAAP,CAAYR,WAAZ,EAAyBO,OAAOE,IAAhC;AACD,SAJH,EAKGC,KALH,CAKS,UAACC,GAAD,EAAS;AACd;AACAjB,iBAAOc,IAAP,CAAY,YAAZ,EAA0BG,GAA1B;AACD,SARH;AASD,OAbD;AAcD,KAnBD;;AAqBAjB,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAY;AAClCE,cAAQC,GAAR,CAAY,gBAAgBF,OAAOG,EAAnC;AACD,KAFD;AAID,GA9BD;;AAgCAX,SAAO0B,MAAP,CAAcrB,IAAd,EAAoB;AAAA,WAAMI,QAAQC,GAAR,CAAY,8BAA8BL,IAA1C,CAAN;AAAA,GAApB;AACD,CA/CD","file":"index.js","sourcesContent":["const path = require('path');\nconst business = require('./business');\n\nmodule.exports = (opts) => {\n  let stubBasePath = path.join(opts.SRC_PATH, opts.STUB_RELATIVE_PATH);\n\n  let stubList = business.getStubList(stubBasePath);\n\n  const server = require('http').createServer();\n\n  const io = require('socket.io')(server, {\n    serveClient: false,\n    wsEngine: 'ws' // uws is not supported since it is a native module\n  });\n\n  const port = opts.wsPort || 3888;\n\n  io.on('connect', function (socket) {\n    console.log('connect ' + socket.id);\n\n    // 此处遍历生成监听事件\n    // console.log('stubList', stubList);\n    stubList.forEach((stubData) => {\n      const SOCKET_NAME = stubData.target;\n\n      // 每一个 stub 都监听其特定的消息\n      // TODO 此处需要确认如果有多个同样的 SOCKET_NAME，则会发生什么事情，是否需要程序进行提示？\n      socket.on(SOCKET_NAME, function (...args) {\n        console.log(Date.now(), SOCKET_NAME, socket.id, args);\n\n        // 获取这个stub的激活状态的module，并返回到客户端\n        business.getStubModule(stubBasePath, SOCKET_NAME)\n          .then((result) => {\n            // console.log('-then-', result);\n            socket.emit(SOCKET_NAME, result.data);\n          })\n          .catch((err) => {\n            // console.error('-catch-', err);\n            socket.emit('stub_error', err);\n          });\n      });\n    });\n\n    socket.on('disconnect', function () {\n      console.log('disconnect ' + socket.id);\n    });\n\n  });\n\n  server.listen(port, () => console.log('server listening on port ' + port));\n};\n\n"]}