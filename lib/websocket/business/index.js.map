{"version":3,"sources":["../../../src/websocket/business/index.js"],"names":["fs","require","_","path","marked","dealTarget","moduleTool","getStubList","stubBasePath","targetNameArr","getTargetNameList","targetArr","forEach","targetName","push","getStub","getStubByMatch","jsonFileArr","checkVal","arr","getTargetListByMatch","dbState","target","getStubModule","getAllMatmanFiles","stubData","reject","stubModuleName","activeModule","stubModulePath","join","name","getResult","then","data","stubDBState","stubName","curStubPath","mockerConfigDBState","getTargetConfigDBState","console","error","stubDB","getTargetDB","getTargetDBState","modules","getTargetModules","targetModuleData","length","setState","merge","_fullPath","getStubReadme","getTargetReadme","updateStub","newState","updateTarget","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst marked = require('marked');\n\nconst dealTarget = require('../../util/deal-target');\nconst moduleTool = require('../../util/module-tool');\n\n/**\n * 获取所有的 stub 列表\n * @param {String} stubBasePath 目标的基础路径\n */\nfunction getStubList(stubBasePath) {\n  // 1. 获取所有的 target name\n  let targetNameArr = dealTarget.getTargetNameList(stubBasePath);\n\n  // 2. 根据 target name 获取该 target 下的所有  result modules\n  let targetArr = [];\n\n  targetNameArr.forEach((targetName) => {\n    targetArr.push(getStub(stubBasePath, targetName));\n  });\n\n  return targetArr;\n}\n\n/**\n * 根据比对值，找出对应的 stub\n * @param jsonFileArr\n * @param checkVal\n * @return {*}\n */\nfunction getStubByMatch(jsonFileArr, checkVal) {\n  let arr = dealTarget.getTargetListByMatch(jsonFileArr, function (dbState) {\n    return checkVal === dbState.target;\n  });\n\n  return arr[0];\n}\n\n/**\n * 根据 route 请求，获取某个 mock module 的结果\n *\n * @param {String} stubBasePath\n * @param {String} target 当前要处理的目标\n * @param {Object} params 请求参数值\n * @param {Object} req req\n * @return {Promise}\n */\nfunction getStubModule(stubBasePath, checkVal) {\n  let jsonFileArr = dealTarget.getAllMatmanFiles(stubBasePath);\n\n  // 匹配 stub\n  let stubData = getStubByMatch(jsonFileArr, checkVal);\n\n  if (!stubData) {\n    return Promise.reject('UNKNOWN_STUB');\n  }\n\n  // 当前激活的 stub module\n  let stubModuleName = stubData.activeModule;\n\n  // 组装获取 stub module 的文件地址\n  let stubModulePath = path.join(stubBasePath, stubData.name, 'result_modules', stubModuleName);\n\n  return moduleTool.getResult(stubModulePath)\n    .then((data) => {\n      return {\n        data: data,\n        stubDBState: stubData,\n        stubModuleName: stubModuleName\n      }\n    });\n}\n\n/**\n * 获取指定 mocker 的信息，包括mock module信息\n */\nfunction getStub(stubBasePath, stubName) {\n  let curStubPath = path.join(stubBasePath, stubName);\n\n  // 1. 获取 stub 下的 config.js 文件内容\n  let mockerConfigDBState = dealTarget.getTargetConfigDBState(curStubPath);\n\n  // 至少得有 target 字段，否则报错\n  if (!mockerConfigDBState || !mockerConfigDBState.target) {\n    console.error(stubName + ' should define property of \"target\"! ');\n    return;\n  }\n\n  // 2. 获取这个 stub 模块的 db 对象\n  let stubDB = dealTarget.getTargetDB(curStubPath);\n\n  // 3. 获取 stub 的db信息\n  let stubDBState = dealTarget.getTargetDBState(stubName, stubDB, mockerConfigDBState);\n\n  // 4. 获取当前的 stub 下的 modules 列表\n  let modules = dealTarget.getTargetModules(curStubPath, function (targetModuleData) {\n    return targetModuleData;\n  });\n\n  // mock module\n  stubDBState.modules = modules;\n\n  // 5. 其他处理\n  // 如果不存在默认的activeModule，则设置第一个mock module为默认\n  if (!stubDBState.activeModule && modules.length) {\n    stubDBState.activeModule = modules[0].name;\n  }\n\n  // 6. 更新到 matman.json\n  stubDB.setState(stubDBState);\n\n  return _.merge({}, stubDBState, {\n    _fullPath: curStubPath\n  });\n}\n\n/**\n * 获取指定 mocker 的 README 信息\n */\nfunction getStubReadme(stubBasePath, stubName) {\n  return dealTarget.getTargetReadme(stubBasePath, stubName);\n}\n\n/**\n * 更新 stub 的 信息\n * @param stubBasePath\n * @param stubName\n * @param newState\n */\nfunction updateStub(stubBasePath, stubName, newState) {\n  return dealTarget.updateTarget(stubBasePath, stubName, newState);\n}\n\nmodule.exports = {\n  getStubList: getStubList,\n  getStub: getStub,\n  getStubByMatch: getStubByMatch,\n  getStubReadme: getStubReadme,\n  updateStub: updateStub,\n  getStubModule: getStubModule\n};\n\n\n"]}