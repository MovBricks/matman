{"version":3,"sources":["../../../src/server/business/index.js"],"names":["fs","require","_","path","marked","util","mocker","getMockerList","mockerBasePath","mockerNameArr","file","getAll","globs","forEach","item","isDirectory","push","basename","relativePath","console","error","join","basePath","log","mockerArr","mockerName","getMocker","getCurMocker","jsonFileArr","route","params","arr","i","length","db","getDB","dbState","getState","paramsKeyLength","pureOne","j","lengthj","curMockerData","routeExtra","routeExtraKeys","routeExtraKeyLength","isFound","k","field","getMockModule","req","mockerData","reject","mockModuleName","_m_target","activeModule","mockModulePath","name","modules","mockModuleItem","merge","query","mockerModuleTool","getResult","then","data","mockerDBState","curMockerPath","curMockModulesPath","mockerConfigFile","existsSync","mockerConfigDB","mockerConfigDBState","mockerDBFile","mockerDB","disable","description","defaultModule","method","priority","tags","union","mockModuleDBFile","mockModuleData","mockModuleDB","setState","_fullPath","getMockerReadme","mockerReadmeFile","setOptions","renderer","Renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","readFileSync","e","stack","updateMocker","newState","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst marked = require('marked');\n\nconst util = require('../../util');\nconst mocker = require('../../mocker');\n\n/**\n * 获取所有的 mocker 列表，包括各个mocker的mock module信息\n */\nfunction getMockerList(mockerBasePath) {\n  // 1. 获取所有的 mocker name\n  let mockerNameArr = [];\n\n  util.file.getAll(mockerBasePath, { globs: ['*'] }).forEach((item) => {\n    // 限制只处理文件夹类型的\n    if (item.isDirectory()) {\n      mockerNameArr.push(path.basename(item.relativePath));\n    } else {\n      console.error(`${path.join(item.basePath, item.relativePath)} SHOULD BE Directory!`)\n    }\n  });\n\n  console.log(mockerNameArr);\n\n  // 2. 根据 mocker name 获取该 mocker 下的所有 mock modules\n  let mockerArr = [];\n\n  mockerNameArr.forEach((mockerName) => {\n    mockerArr.push(getMocker(mockerBasePath, mockerName));\n  });\n\n  return mockerArr;\n}\n\nfunction getCurMocker(jsonFileArr, route, params = {}) {\n  let arr = [];\n\n  // 循环查找所有的 matman.json 文件，对比 route 字段，可能会有多个匹配\n  for (let i = 0, length = jsonFileArr.length; i < length; i++) {\n    let item = jsonFileArr[i];\n\n    // 获取每个 mocker 中的 matman.json 文件内容，以便寻找到相同 route 的那个 mocker\n    let db = mocker.db.getDB(path.join(item.basePath, item.relativePath));\n    let dbState = db.getState();\n    // console.log(dbState);\n\n    // 不仅校验 dbState.route ，还需要校验 dbState.routeExtra\n    if (route === dbState.route) {\n      arr.push(dbState);\n    }\n  }\n\n  // 如果只有一个匹配，则一定是它\n  if (arr.length < 2) {\n    return arr[0];\n  }\n\n  let paramsKeyLength = Object.keys(params).length;\n\n  let pureOne;\n\n  // 有多个匹配时，要比对 routeExtra 值\n  for (let j = 0, lengthj = arr.length; j < lengthj; j++) {\n    let curMockerData = arr[j],\n      routeExtra = curMockerData.routeExtra || {},\n      routeExtraKeys = Object.keys(routeExtra),\n      routeExtraKeyLength = routeExtraKeys.length;\n\n    if (!routeExtraKeyLength) {\n      // 如果没有配置限定\n\n      if (!paramsKeyLength) {\n        // 如果请求参数也为空，则就是它了\n        return curMockerData;\n      }\n\n      // 如果请求参数不为空，这个很难判断，但如果没有其他精准匹配结果，则返回它\n      pureOne = curMockerData;\n\n    } else {\n      // 如果配置了限定\n\n      if (!paramsKeyLength) {\n        // 如果请求参数也为空，则肯定不是它\n        continue;\n      }\n\n      let isFound = true;\n\n      // 如果请求参数不为空，则对比参数值\n      for (let k = 0; k < routeExtraKeyLength; k++) {\n        let field = routeExtraKeys[k];\n\n        // 这里都转化为字符串来比较，一旦不相等，则不再判断了\n        if ((routeExtra[field] + '') !== (params[field] + '')) {\n          isFound = false;\n          break;\n        }\n      }\n\n      if (isFound) {\n        return curMockerData;\n      }\n    }\n  }\n\n  return pureOne;\n}\n\n/**\n * 根据 route 请求，获取某个 mock module 的结果\n *\n * @param {String} mockerBasePath\n * @param {String} route 当前请求的 route\n * @param {Object} params 请求参数值\n * @param {Object} req req\n * @return {Promise}\n */\nfunction getMockModule(mockerBasePath, route, params, req) {\n  let jsonFileArr = util.file.getAll(mockerBasePath, { globs: ['*/matman.json'] });\n\n  // 匹配 mocker\n  let mockerData = getCurMocker(jsonFileArr, route, params);\n\n  if (!mockerData) {\n    return Promise.reject('UNKNOWN_CGI');\n  }\n\n  // 有可能是指定的 mock module， 也可能是当前的 mock module\n  let mockModuleName = params._m_target ? params._m_target : mockerData.activeModule;\n\n  // 组装获取 mock module 的文件地址\n  let mockModulePath = path.join(mockerBasePath, mockerData.name, 'mock_modules', mockModuleName);\n\n  // 还有部分参数在 mock module 的 query 字段中\n  for (let j = 0, lengthj = mockerData.modules.length; j < lengthj; j++) {\n    let mockModuleItem = mockerData.modules[j];\n    if (mockModuleName === mockModuleItem.name) {\n      params = _.merge({}, mockModuleItem.query, params);\n    }\n  }\n\n  return mocker.mockerModuleTool.getResult(mockModulePath, params, req)\n    .then((data) => {\n      return {\n        data: data,\n        mockerDBState: mockerData,\n        mockModuleName: mockModuleName,\n        params: params,\n      }\n    });\n}\n\n/**\n * 获取指定 mocker 的信息，包括mock module信息\n */\nfunction getMocker(mockerBasePath, mockerName) {\n  let curMockerPath = path.join(mockerBasePath, mockerName);\n  let curMockModulesPath = path.join(curMockerPath, 'mock_modules');\n  let mockerConfigFile = path.join(curMockerPath, 'config.json');\n\n  // mocker 的 config.json 可能不存在\n  if (!fs.existsSync(mockerConfigFile)) {\n    console.error(mockerConfigFile + ' is not exist!');\n    return;\n  }\n\n  // 获取这个 mocker 模块的 config 信息\n  let mockerConfigDB = mocker.db.getDB(mockerConfigFile);\n  let mockerConfigDBState = mockerConfigDB.getState();\n\n  // 至少得有 route 字段，否则报错\n  if (!mockerConfigDBState.route) {\n    console.error(mockerConfigFile + ' should define property of \"route\"! ');\n    return;\n  }\n\n  // matman.json 可能不存在，此时新增\n  let mockerDBFile = path.join(curMockerPath, 'matman.json');\n\n  // 获取这个 mocker 模块的详细信息\n  let mockerDB = mocker.db.getDB(mockerDBFile);\n\n  let mockerDBState;\n\n  if (!fs.existsSync(mockerDBFile)) {\n    mockerDBState = _.merge({}, mockerConfigDBState);\n  } else {\n    mockerDBState = _.merge({}, mockerDB.getState(), mockerConfigDBState);\n  }\n\n  mockerDBState.name = mockerDBState.name || mockerName;\n  mockerDBState.disable = mockerDBState.disable || false;\n  mockerDBState.description = mockerDBState.description || mockerDBState.name;\n  mockerDBState.activeModule = mockerDBState.activeModule || mockerDBState.defaultModule;\n  mockerDBState.method = mockerDBState.method || 'get';\n  mockerDBState.priority = mockerDBState.priority || 0;\n  mockerDBState.tags = _.union(['全部'], mockerDBState.tags || []);\n\n  // 获取当前的 mocker 下的 modules 列表\n  let modules = [];\n  util.file.getAll(curMockModulesPath, { globs: ['*'] }).forEach((item) => {\n    if (!item.isDirectory()) {\n      console.error('SHOULD BE Directory!', item);\n      return;\n    }\n\n    // 获取模块名\n    let mockModuleName = path.basename(item.relativePath);\n\n    // config.json 的作用是用于用户自定义，拥有最高的优先级\n    let mockModuleDBFile = path.join(curMockModulesPath, mockModuleName, 'config.json');\n    let mockModuleData;\n\n    if (!fs.existsSync(mockModuleDBFile)) {\n      // config.json不存在，则设置默认值\n      mockModuleData = {};\n    } else {\n      // config.json不存在，则获取这个模块的详细信息\n      let mockModuleDB = mocker.db.getDB(mockModuleDBFile);\n\n      mockModuleData = mockModuleDB.getState();\n    }\n\n    mockModuleData.name = mockModuleData.name || mockModuleName;\n    mockModuleData.description = mockModuleData.description || mockModuleName;\n\n    // TODO 如果是 /id/:id 类型的，则此处可能会有问题，或许还需要把请求值放入到query中\n    mockModuleData.query = _.merge({}, mockModuleData.query, { _m_target: mockModuleName });\n\n    mockModuleData.priority = mockModuleData.priority || 0;\n\n    modules.push(mockModuleData);\n  });\n\n  // 如果不存在默认的activeModule，则设置第一个mock module为默认\n  if (!mockerDBState.activeModule && modules.length) {\n    mockerDBState.activeModule = modules[0].name;\n  }\n\n  // mock module\n  mockerDBState.modules = modules;\n\n  // 更新到 matman.json\n  mockerDB.setState(mockerDBState);\n\n  // 如果是 id/:id 的形式，则params也需要有\n\n  return _.merge({}, mockerDBState, {\n    _fullPath: curMockerPath,\n  });\n}\n\n/**\n * 获取指定 mocker 的 README 信息\n */\nfunction getMockerReadme(mockerBasePath, mockerName) {\n  let curMockerPath = path.join(mockerBasePath, mockerName);\n\n  let mockerReadmeFile = path.join(curMockerPath, 'readme.md');\n  if (!fs.existsSync(mockerReadmeFile)) {\n    mockerReadmeFile = path.join(curMockerPath, 'readme.MD');\n    if (!fs.existsSync(mockerReadmeFile)) {\n      mockerReadmeFile = path.join(curMockerPath, 'README.md');\n      if (!fs.existsSync(mockerReadmeFile)) {\n        mockerReadmeFile = path.join(curMockerPath, 'README.MD');\n        if (!fs.existsSync(mockerReadmeFile)) {\n          return '';\n        }\n      }\n    }\n  }\n\n  marked.setOptions({\n    renderer: new marked.Renderer(),\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: false,\n    smartLists: true,\n    smartypants: false\n  });\n\n  try {\n    return marked(fs.readFileSync(mockerReadmeFile, 'utf8'));\n  } catch (e) {\n    return e.stack;\n  }\n}\n\n/**\n * 更新 mocker 的 信息\n * @param mockerBasePath\n * @param mockerName\n * @param newState\n */\nfunction updateMocker(mockerBasePath, mockerName, newState) {\n  let curMockerPath = path.join(mockerBasePath, mockerName);\n\n  // 获取这个 mocker 模块的详细信息\n  let mockerDB = mocker.db.getDB(path.join(curMockerPath, 'matman.json'));\n\n  // 更新 mocker db 数据\n  let mockerDBState = mockerDB.getState();\n  mockerDBState = _.merge({}, mockerDBState, newState);\n  mockerDB.setState(mockerDBState);\n\n  return mockerDBState;\n}\n\nmodule.exports = {\n  getMockerList: getMockerList,\n  getMocker: getMocker,\n  getMockerReadme: getMockerReadme,\n  updateMocker: updateMocker,\n  getMockModule: getMockModule\n};\n\n\n"]}