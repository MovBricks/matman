{"version":3,"sources":["../../../src/server/router-handler/index.js"],"names":["express","require","methodOverride","_","request","bodyParser","HandlerParser","default","initPlugins","util","module","exports","entry","handlerParser","handlerList","parseAndSave","router","Router","use","render","req","res","jsonp","locals","data","all","next","header","forEach","handlerData","METHOD","method","toLowerCase","ROUTE_PATH","route","paramsFromReferer","JSON","parse","query","headers","referer","e","console","log","isDisable","matchedReferer","filter","item","_m_name","name","_m_disable","body","curMockerData","getHandler","disable","isDisabled","handlerName","url","params","merge","getHandleModuleResultForHttp","then","result","append","extra","handlerInfo","handleModuleInfo","delay","setTimeout","catch","err","errMsg","stack","error","status","send","isRequested","_m_from","opts","host","jar","qs","get","on","response","pipe","post","form","_handlerParser"],"mappings":"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","file":"index.js","sourcesContent":["const express = require('express');\nconst methodOverride = require('method-override');\nconst _ = require('lodash');\nconst request = require('request');\nconst bodyParser = require('../body-parser');\nconst HandlerParser = require('../../parser/handler-parser2').default;\nconst initPlugins = require('./plugins');\nconst util = require('../../util');\n\nmodule.exports = (entry) => {\n  const handlerParser = new HandlerParser(entry);\n\n  let handlerList = handlerParser.parseAndSave();\n\n  // Create router\n  // http://expressjs.com/en/4x/api.html#router\n  const router = express.Router();\n\n  // Add middlewares\n  router.use(methodOverride());\n  router.use(bodyParser);\n\n  // Expose render\n  router.render = (req, res) => {\n    res.jsonp(res.locals.data);\n  };\n\n  initPlugins(router, handlerParser);\n\n  // 所有的请求都会经过这里，可以做一些类似权限控制的事情\n  router.all('*', function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    next();\n  });\n\n  // 根据用户配置的路由关系，进行解析\n  // console.log('handlerList', handlerList);\n  handlerList.forEach((handlerData) => {\n    // 默认是 get 请求，除非定义 method 字段\n    const METHOD = (handlerData.method || 'get').toLowerCase();\n    const ROUTE_PATH = handlerData.route;\n\n    // http://expressjs.com/en/4x/api.html#router.METHOD\n    router[METHOD](ROUTE_PATH, function (req, res, next) {\n      // Express的req对象，详见 http://expressjs.com/en/4x/api.html#req\n\n      // post 请求\n      // handlerData.route=\"/cgi-bin/a/b/post_cgi\"\n      // post http://localhost:3000/cgi-bin/a/b/post_cgi data={activeModule:\"error_not_login\"}\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/post_cgi\"\n      // req.url=\"/cgi-bin/a/b/post_cgi\"\n      // req.method=\"POST\"\n      // req.OriginalMethod=\"POST\"\n      // req.body.activeModule = \"error_not_login\"\n      // req.body = data\n\n      // get 请求\n      // handlerData.route=\"/cgi-bin/a/b/simple_cgi\"\n      // get http://localhost:3000/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\"\n      // req.url=\"/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\"\n      // req.method=\"GET\"\n      // req.OriginalMethod=\"GET\"\n      // req.query.activeModule = \"error_not_login\"\n\n      // get 请求且route为匹配类型\n      // handlerData.route=\"/cgi-bin/a/b/id/:id\"\n      // get http://localhost:3000/cgi-bin/a/b/id/1?activeModule=error_not_login\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/id/1?activeModule=error_not_login\"\n      // req.url=\"/cgi-bin/a/b/id/1?activeModule=error_not_login\"\n      // req.method=\"GET\"\n      // req.OriginalMethod=\"GET\"\n      // req.query.activeModule = \"error_not_login\"\n      // req.params.id = \"1\"\n\n      // console.log(req.headers.referer)\n      // 目前只支持 plugin=mocker 的场景，_m_name=该模块的名字，_m_target=该模块的值对应的名字,_m_disable\n      let paramsFromReferer;\n      try {\n        paramsFromReferer = JSON.parse(util.query('_matman', req.headers.referer)) || [];\n      } catch (e) {\n        paramsFromReferer = [];\n      }\n      // let paramsFromReferer = [{\n      //   _m_name: 'demo_simple11',\n      //   _m_target: 'success',\n      //   _m_disable: 0\n      // }];\n\n      console.log('====paramsFromReferer=====', paramsFromReferer);\n\n      let isDisable;\n\n      // 判断该路由的名字是否在referer中\n      let matchedReferer = paramsFromReferer.filter((item) => {\n        return item._m_name === handlerData.name;\n      })[0];\n\n      // console.log('====matchedReferer=====', matchedReferer);\n\n      if (matchedReferer) {\n        // referer 里面的请求参数拥有最高优先级，因为这种场景比较特殊，主要用于自动化测试之用\n        isDisable = matchedReferer._m_disable;\n      } else {\n        // 从请求 req 或者 config.json 文件中检查当前请求是否需要禁用 handle 服务\n        isDisable = req.query._m_disable || req.body._m_disable;\n        if (!isDisable) {\n          // 此处要重新获取新的数据，以便取到缓存的。\n          // TODO 此处还可以优化，比如及时更新缓存中的数据，而不需要每次都去获取\n          let curMockerData = handlerParser.getHandler(handlerData.name, true);\n          isDisable = curMockerData.disable;\n        }\n      }\n\n      if (isDisable) {\n        // 如果当前禁用了 handle 服务，则不处理\n        res.locals.isDisabled = true;\n        res.locals.handlerName = handlerData.name;\n        next();\n      } else {\n        let url = ROUTE_PATH;\n        let params = (METHOD === 'post') ? req.body : req.query;\n\n        // 还要合并一下来自 url path 中的参数值\n        // referer 里面的请求参数拥有最高优先级，因为这种场景比较特殊，主要用于自动化测试之用\n        params = _.merge({}, params, req.params, matchedReferer);\n\n        // 请求\n        handlerParser.getHandleModuleResultForHttp(url, params, req)\n          .then((result) => {\n            res.append('matman-handler', result.extra.handlerInfo.name);\n            res.append('matman-handle-module', result.extra.handleModuleInfo.name);\n\n            // 延时返回\n            let delay = result.extra.handleModuleInfo.delay || 0;\n            res.append('matman-delay', delay + '');\n\n            if (delay) {\n              setTimeout(() => {\n                res.jsonp(result.data);\n              }, delay);\n            } else {\n              res.jsonp(result.data);\n            }\n          })\n          .catch((err) => {\n            // 注意 err 有可能是 Error 对象，也可能是普通的字符串或对象\n            let errMsg = err && err.stack || err;\n\n            console.error(errMsg);\n\n            res.status(500).send(errMsg);\n          });\n      }\n\n    });\n  });\n\n  router.use((req, res) => {\n    // get 请求\n    // get http://localhost:3000/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\n    // req.headers.host=\"localhost:3000\"\n    // req.params[0]=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.baseUrl=\"\"\n    // req.originalUrl=\"/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\"\n    // req.url=\"/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\"\n    // req.method=\"GET\"\n    // req.OriginalMethod=\"GET\"\n    // req.query.activeModule = \"error_not_login\"\n\n    // post 请求\n    // post http://localhost:3000/cgi-bin/a/b/not_exist_cgi data={activeModule:\"error_not_login\"}\n    // req.params[0]=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.baseUrl=\"\"\n    // req.originalUrl=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.url=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.method=\"POST\"\n    // req.OriginalMethod=\"POST\"\n    // req.body.activeModule = \"error_not_login\"\n\n    // 未匹配到的请求将会来到这里\n    // console.log('[use]', req.url, req.query._m_from);\n\n    // 判断是否已经是第二次请求了。\n    // 请求本地服务的时候，可能会陷入死循环中，因此此处校验最多只请求一次。\n    const isRequested = !!req.query._m_from;\n\n    const opts = {\n      url: 'http://' + req.headers.host + req.url,\n      headers: req.headers,\n      jar: true,\n      // timeout: 4000,\n      qs: {\n        _m_from: 1\n      }\n    };\n\n    if (res.locals.isDisabled) {\n      res.append('matman-disable', res.locals.handlerName);\n    }\n\n    if (req.method === 'GET' && !isRequested) {\n      request\n        .get(_.merge({}, opts))\n        .on('response', function (response) {\n          // console.log(response.statusCode) // 200\n        })\n        .on('error', function (err) {\n          console.error(err);\n          res.status(500).send(err.stack);\n        })\n        .pipe(res);\n    } else if (req.method === 'POST' && !isRequested) {\n      request\n        .post(_.merge({}, opts, {\n          form: req.body\n        }))\n        .on('response', function (response) {\n          // console.log(response.statusCode)\n        })\n        .on('error', function (err) {\n          console.error(err);\n          res.status(500).send(err.stack);\n        })\n        .pipe(res);\n    } else {\n      if (!res.locals.data) {\n        res.status(404);\n        res.locals.data = {};\n      }\n\n      router.render(req, res);\n    }\n\n  });\n\n  router.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n\n  // 携带变量出去\n  router._handlerParser = handlerParser;\n\n  return router;\n};\n"]}