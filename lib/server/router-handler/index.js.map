{"version":3,"sources":["../../../src/server/router-handler/index.js"],"names":["express","require","methodOverride","_","request","bodyParser","HandlerParser","default","initPlugins","module","exports","entry","handlerParser","HANDLER_PATH","DATA_PATH","handlerList","parseAndSave","router","Router","use","render","req","res","jsonp","locals","data","all","next","header","forEach","handlerData","METHOD","method","toLowerCase","ROUTE_PATH","route","isDisable","query","_m_disable","body","curMockerData","getHandler","name","disable","isDisabled","handlerName","url","params","merge","getHandleModuleResult","then","result","append","extra","handlerInfo","handleModuleInfo","catch","err","errMsg","stack","console","error","status","send","isRequested","_m_from","opts","headers","host","jar","qs","get","on","response","pipe","post","form","_handlerParser"],"mappings":"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","file":"index.js","sourcesContent":["const express = require('express');\nconst methodOverride = require('method-override');\nconst _ = require('lodash');\nconst request = require('request');\nconst bodyParser = require('../body-parser');\nconst HandlerParser = require('../../parser/handler-parser').default;\nconst initPlugins = require('./plugins');\n\nmodule.exports = (entry) => {\n  const handlerParser = new HandlerParser(entry.HANDLER_PATH, entry.DATA_PATH);\n\n  let handlerList = handlerParser.parseAndSave();\n\n  // Create router\n  // http://expressjs.com/en/4x/api.html#router\n  const router = express.Router();\n\n  // Add middlewares\n  router.use(methodOverride());\n  router.use(bodyParser);\n\n  // Expose render\n  router.render = (req, res) => {\n    res.jsonp(res.locals.data)\n  };\n\n  initPlugins(router, handlerParser);\n\n  // 所有的请求都会经过这里，可以做一些类似权限控制的事情\n  router.all('*', function (req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    next();\n  });\n\n  // 根据用户配置的路由关系，进行解析\n  // console.log('handlerList', handlerList);\n  handlerList.forEach((handlerData) => {\n    // 默认是 get 请求，除非定义 method 字段\n    const METHOD = (handlerData.method || 'get').toLowerCase();\n    const ROUTE_PATH = handlerData.route;\n\n    // http://expressjs.com/en/4x/api.html#router.METHOD\n    router[METHOD](ROUTE_PATH, function (req, res, next) {\n      // Express的req对象，详见 http://expressjs.com/en/4x/api.html#req\n\n      // post 请求\n      // handlerData.route=\"/cgi-bin/a/b/post_cgi\"\n      // post http://localhost:3000/cgi-bin/a/b/post_cgi data={activeModule:\"error_not_login\"}\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/post_cgi\"\n      // req.url=\"/cgi-bin/a/b/post_cgi\"\n      // req.method=\"POST\"\n      // req.OriginalMethod=\"POST\"\n      // req.body.activeModule = \"error_not_login\"\n      // req.body = data\n\n      // get 请求\n      // handlerData.route=\"/cgi-bin/a/b/simple_cgi\"\n      // get http://localhost:3000/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\"\n      // req.url=\"/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\"\n      // req.method=\"GET\"\n      // req.OriginalMethod=\"GET\"\n      // req.query.activeModule = \"error_not_login\"\n\n      // get 请求且route为匹配类型\n      // handlerData.route=\"/cgi-bin/a/b/id/:id\"\n      // get http://localhost:3000/cgi-bin/a/b/id/1?activeModule=error_not_login\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/id/1?activeModule=error_not_login\"\n      // req.url=\"/cgi-bin/a/b/id/1?activeModule=error_not_login\"\n      // req.method=\"GET\"\n      // req.OriginalMethod=\"GET\"\n      // req.query.activeModule = \"error_not_login\"\n      // req.params.id = \"1\"\n\n      // 从请求 req 或者 config.json 文件中检查当前请求是否需要禁用 handle 服务\n      let isDisable = req.query._m_disable || req.body._m_disable;\n      if (!isDisable) {\n        // 此处要重新获取新的数据，以便取到缓存的。\n        // TODO 此处还可以优化，比如及时更新缓存中的数据，而不需要每次都去获取\n        let curMockerData = handlerParser.getHandler(handlerData.name, true);\n\n        isDisable = curMockerData.disable;\n      }\n\n      if (isDisable) {\n        // 如果当前禁用了 handle 服务，则不处理\n        res.locals.isDisabled = true;\n        res.locals.handlerName = handlerData.name;\n        next();\n      } else {\n        let url = ROUTE_PATH;\n        let params = (METHOD === 'post') ? req.body : req.query;\n\n        // 还要合并一下来自 url path 中的参数值\n        params = _.merge({}, params, req.params);\n\n        // 请求\n        handlerParser.getHandleModuleResult(url, params, req)\n          .then((result) => {\n            res.append('matman-handler', result.extra.handlerInfo.name);\n            res.append('matman-handle-module', result.extra.handleModuleInfo.name);\n            res.jsonp(result.data);\n          })\n          .catch((err) => {\n            // 注意 err 有可能是 Error 对象，也可能是普通的字符串或对象\n            let errMsg = err.stack || err;\n\n            console.error(errMsg);\n\n            res.status(500).send(errMsg);\n          });\n      }\n\n    });\n  });\n\n  router.use((req, res) => {\n    // get 请求\n    // get http://localhost:3000/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\n    // req.headers.host=\"localhost:3000\"\n    // req.params[0]=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.baseUrl=\"\"\n    // req.originalUrl=\"/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\"\n    // req.url=\"/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\"\n    // req.method=\"GET\"\n    // req.OriginalMethod=\"GET\"\n    // req.query.activeModule = \"error_not_login\"\n\n    // post 请求\n    // post http://localhost:3000/cgi-bin/a/b/not_exist_cgi data={activeModule:\"error_not_login\"}\n    // req.params[0]=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.baseUrl=\"\"\n    // req.originalUrl=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.url=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.method=\"POST\"\n    // req.OriginalMethod=\"POST\"\n    // req.body.activeModule = \"error_not_login\"\n\n    // 未匹配到的请求将会来到这里\n    // console.log('[use]', req.url, req.query._m_from);\n\n    // 判断是否已经是第二次请求了。\n    // 请求本地服务的时候，可能会陷入死循环中，因此此处校验最多只请求一次。\n    const isRequested = !!req.query._m_from;\n\n    const opts = {\n      url: 'http://' + req.headers.host + req.url,\n      headers: req.headers,\n      jar: true,\n      // timeout: 4000,\n      qs: {\n        _m_from: 1\n      }\n    };\n\n    if (res.locals.isDisabled) {\n      res.append('matman-disable', res.locals.handlerName);\n    }\n\n    if (req.method === 'GET' && !isRequested) {\n      request\n        .get(_.merge({}, opts))\n        .on('response', function (response) {\n          // console.log(response.statusCode) // 200\n        })\n        .on('error', function (err) {\n          console.error(err);\n          res.status(500).send(err.stack);\n        })\n        .pipe(res);\n    } else if (req.method === 'POST' && !isRequested) {\n      request\n        .post(_.merge({}, opts, {\n          form: req.body,\n        }))\n        .on('response', function (response) {\n          // console.log(response.statusCode)\n        })\n        .on('error', function (err) {\n          console.error(err);\n          res.status(500).send(err.stack);\n        })\n        .pipe(res);\n    } else {\n      if (!res.locals.data) {\n        res.status(404);\n        res.locals.data = {};\n      }\n\n      router.render(req, res);\n    }\n\n  });\n\n  router.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n\n  // 携带变量出去\n  router._handlerParser = handlerParser;\n\n  return router;\n};\n"]}