{"version":3,"sources":["../../../src/server/router-mocker/index.js"],"names":["express","require","methodOverride","_","request","bodyParser","business","module","exports","entry","mockerList","getMockerList","MOCKER_PATH","router","Router","use","render","req","res","jsonp","locals","data","get","result","getMocker","params","mockerName","html","getMockerReadme","post","updateMocker","body","all","next","forEach","mockerData","METHOD","method","toLowerCase","ROUTE_PATH","route","mockerBasePath","isDisable","query","_m_disable","curMockerData","name","disable","isDisabled","url","merge","getMockModule","then","append","mockerDBState","mockModuleName","catch","err","errMsg","stack","console","error","status","send","isRequested","_m_from","opts","headers","host","jar","qs","on","response","pipe","form"],"mappings":"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","file":"index.js","sourcesContent":["const express = require('express');\nconst methodOverride = require('method-override');\nconst _ = require('lodash');\nconst request = require('request');\nconst bodyParser = require('../body-parser');\nconst business = require('../business');\n\nmodule.exports = (entry) => {\n  let mockerList = business.getMockerList(entry.MOCKER_PATH);\n\n  // Create router\n  // http://expressjs.com/en/4x/api.html#router\n  const router = express.Router();\n\n  // Add middlewares\n  router.use(methodOverride());\n  router.use(bodyParser);\n\n  // Expose render\n  router.render = (req, res) => {\n    res.jsonp(res.locals.data)\n  };\n\n  // GET /sys-cgi/mocker 所有的 mocker 列表信息\n  router.get('/sys-cgi/mocker', (req, res) => {\n    mockerList = business.getMockerList(entry.MOCKER_PATH);\n\n    res.jsonp(mockerList);\n  });\n\n  // GET /sys-cgi/mocker/:mockerName 获得这个 mocker 的信息\n  router.get('/sys-cgi/mocker/:mockerName', (req, res) => {\n    let result = business.getMocker(entry.MOCKER_PATH, req.params.mockerName);\n\n    res.jsonp(result);\n  });\n\n  // GET /sys-cgi/mocker/:mockerName/readme 获得这个 mocker 的readme信息\n  router.get('/sys-cgi/mocker/:mockerName/readme', (req, res) => {\n    // res.send(business.getMockerReadme(entry.MOCKER_PATH, req.params.mockerName));\n    // res.send(business.getMockerReadme(entry.MOCKER_PATH, req.params.mockerName));\n    res.jsonp({\n      html: business.getMockerReadme(entry.MOCKER_PATH, req.params.mockerName)\n    });\n  });\n\n  // POST /sys-cgi/mocker/:mockerName 设置这个mocker的信息\n  router.post('/sys-cgi/mocker/:mockerName', (req, res) => {\n    let result = business.updateMocker(entry.MOCKER_PATH, req.params.mockerName, req.body);\n\n    res.jsonp(result);\n  });\n\n  // 所有的请求都会经过这里，可以做一些类似权限控制的事情\n  router.all('*', function (req, res, next) {\n    next();\n  });\n\n  // 根据用户配置的路由关系，进行解析\n  // console.log('mockerList', mockerList);\n  mockerList.forEach((mockerData) => {\n    // 默认是 get 请求，除非定义 method 字段\n    const METHOD = (mockerData.method || 'get').toLowerCase();\n    const ROUTE_PATH = mockerData.route;\n\n    // http://expressjs.com/en/4x/api.html#router.METHOD\n    router[METHOD](ROUTE_PATH, function (req, res, next) {\n      // Express的req对象，详见 http://expressjs.com/en/4x/api.html#req\n\n      // post 请求\n      // mockerData.route=\"/cgi-bin/a/b/post_cgi\"\n      // post http://localhost:3000/cgi-bin/a/b/post_cgi data={activeModule:\"error_not_login\"}\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/post_cgi\"\n      // req.url=\"/cgi-bin/a/b/post_cgi\"\n      // req.method=\"POST\"\n      // req.OriginalMethod=\"POST\"\n      // req.body.activeModule = \"error_not_login\"\n      // req.body = data\n\n      // get 请求\n      // mockerData.route=\"/cgi-bin/a/b/simple_cgi\"\n      // get http://localhost:3000/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\"\n      // req.url=\"/cgi-bin/a/b/simple_cgi?activeModule=error_not_login\"\n      // req.method=\"GET\"\n      // req.OriginalMethod=\"GET\"\n      // req.query.activeModule = \"error_not_login\"\n\n      // get 请求且route为匹配类型\n      // mockerData.route=\"/cgi-bin/a/b/id/:id\"\n      // get http://localhost:3000/cgi-bin/a/b/id/1?activeModule=error_not_login\n      // req.baseUrl=\"\"\n      // req.originalUrl=\"/cgi-bin/a/b/id/1?activeModule=error_not_login\"\n      // req.url=\"/cgi-bin/a/b/id/1?activeModule=error_not_login\"\n      // req.method=\"GET\"\n      // req.OriginalMethod=\"GET\"\n      // req.query.activeModule = \"error_not_login\"\n      // req.params.id = \"1\"\n\n      let mockerBasePath = entry.MOCKER_PATH;\n\n      // 从请求 req 或者 config.json 文件中检查当前请求是否需要禁用 mock 服务\n      let isDisable = req.query._m_disable || req.body._m_disable;\n      if (!isDisable) {\n        // 此处要重新获取新的数据，以便取到缓存的。\n        // TODO 此处还可以优化，比如及时更新缓存中的数据，而不需要每次都去获取\n        let curMockerData = business.getMocker(mockerBasePath, mockerData.name);\n\n        isDisable = curMockerData.disable;\n      }\n\n      if (isDisable) {\n        // 如果当前禁用了 mock 服务，则不处理\n        res.locals.isDisabled = true;\n        res.locals.mockerName = mockerData.name;\n        next();\n      } else {\n        let url = ROUTE_PATH;\n        let params = (METHOD === 'post') ? req.body : req.query;\n\n        // 还要合并一下来自 url path 中的参数值\n        params = _.merge({}, params, req.params);\n\n        // 请求\n        business.getMockModule(mockerBasePath, url, params, req)\n          .then((result) => {\n            res.append('matman-mocker', result.mockerDBState.name);\n            res.append('matman-mock-module', result.mockModuleName);\n            res.jsonp(result.data);\n          })\n          .catch((err) => {\n            // 注意 err 有可能是 Error 对象，也可能是普通的字符串或对象\n            let errMsg = err.stack || err;\n\n            console.error(errMsg);\n\n            res.status(500).send(errMsg);\n          });\n      }\n\n    });\n  });\n\n  router.use((req, res) => {\n    // get 请求\n    // get http://localhost:3000/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\n    // req.headers.host=\"localhost:3000\"\n    // req.params[0]=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.baseUrl=\"\"\n    // req.originalUrl=\"/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\"\n    // req.url=\"/cgi-bin/a/b/not_exist_cgi?activeModule=error_not_login\"\n    // req.method=\"GET\"\n    // req.OriginalMethod=\"GET\"\n    // req.query.activeModule = \"error_not_login\"\n\n    // post 请求\n    // post http://localhost:3000/cgi-bin/a/b/not_exist_cgi data={activeModule:\"error_not_login\"}\n    // req.params[0]=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.baseUrl=\"\"\n    // req.originalUrl=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.url=\"/cgi-bin/a/b/not_exist_cgi\"\n    // req.method=\"POST\"\n    // req.OriginalMethod=\"POST\"\n    // req.body.activeModule = \"error_not_login\"\n\n    // 未匹配到的请求将会来到这里\n    // console.log('[use]', req.url, req.query._m_from);\n\n    // 判断是否已经是第二次请求了。\n    // 请求本地服务的时候，可能会陷入死循环中，因此此处校验最多只请求一次。\n    const isRequested = !!req.query._m_from;\n\n    const opts = {\n      url: 'http://' + req.headers.host + req.url,\n      headers: req.headers,\n      jar: true,\n      // timeout: 4000,\n      qs: {\n        _m_from: 1\n      }\n    };\n\n    if (res.locals.isDisabled) {\n      res.append('matman-disable', res.locals.mockerName);\n    }\n\n    if (req.method === 'GET' && !isRequested) {\n      request\n        .get(_.merge({}, opts))\n        .on('response', function (response) {\n          // console.log(response.statusCode) // 200\n        })\n        .on('error', function (err) {\n          console.error(err);\n          res.status(500).send(err.stack);\n        })\n        .pipe(res);\n    } else if (req.method === 'POST' && !isRequested) {\n      request\n        .post(_.merge({}, opts, {\n          form: req.body,\n        }))\n        .on('response', function (response) {\n          // console.log(response.statusCode)\n        })\n        .on('error', function (err) {\n          console.error(err);\n          res.status(500).send(err.stack);\n        })\n        .pipe(res);\n    } else {\n      if (!res.locals.data) {\n        res.status(404);\n        res.locals.data = {};\n      }\n\n      router.render(req, res);\n    }\n\n  });\n\n  router.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n\n  return router;\n};\n"]}