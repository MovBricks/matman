{"version":3,"sources":["../../src/business/run-config.js"],"names":["fs","require","path","getConfigOpts","opts","configOpts","existsSync","e","console","error","ROOT_PATH","SRC_PATH","join","APP_PATH","DATA_PATH","HANDLERS_RELATIVE_PATH","LOG_PATH","port","definedHandlers","HANDLERS_PATH","shouldWatch","process","env","NODE_ENV","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA;;;;;AAKA,SAASE,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,mBAAJ;;AAEA,MAAI;AACF;AACA,QAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BJ,GAAGM,UAAH,CAAcF,IAAd,CAAhC,EAAqD;AACnDC,mBAAaJ,QAAQG,IAAR,CAAb;AACD,KAFD,MAEO,IAAIA,QAAS,QAAOA,IAAP,uDAAOA,IAAP,OAAgB,QAA7B,EAAwC;AAC7CC,mBAAaD,IAAb;AACD,KAFM,MAEA;AACLC,mBAAa,IAAb;AACD;AACF,GATD,CASE,OAAOE,CAAP,EAAU;AACVC,YAAQC,KAAR,CAAc,wBAAd,EAAwCF,CAAxC;AACD;;AAED;AACA,MAAI,CAACF,UAAL,EAAiB;AACfG,YAAQC,KAAR,CAAc,2BAAd,EAA2CL,IAA3C;AACA,WAAO,IAAP;AACD;;AAED;AACA,MAAI,CAACC,WAAWK,SAAhB,EAA2B;AACzBF,YAAQC,KAAR,CAAc,0BAAd,EAA0CL,IAA1C,EAAgDC,UAAhD;AACA,WAAO,IAAP;AACD;;AAED;AACA;AACAA,aAAWM,QAAX,GAAsBN,WAAWM,QAAX,IAAuBT,KAAKU,IAAL,CAAUP,WAAWK,SAArB,EAAgC,OAAhC,CAA7C;;AAEA;AACAL,aAAWQ,QAAX,GAAsBR,WAAWQ,QAAX,IAAuBX,KAAKU,IAAL,CAAUP,WAAWK,SAArB,EAAgC,OAAhC,CAA7C;;AAEA;AACAL,aAAWS,SAAX,GAAuBT,WAAWS,SAAX,IAAwBT,WAAWQ,QAA1D;;AAEA;AACAR,aAAWU,sBAAX,GAAoCV,WAAWU,sBAAX,IAAqC,YAAzE;;AAEA;AACAV,aAAWW,QAAX,GAAsBX,WAAWW,QAAX,IAAuBd,KAAKU,IAAL,CAAUP,WAAWK,SAArB,EAAgC,MAAhC,CAA7C;;AAEA;AACAL,aAAWY,IAAX,GAAkBZ,WAAWY,IAAX,IAAmB,IAArC;;AAEA;AACAZ,aAAWa,eAAX,GAA6Bb,WAAWa,eAAX,IAA8B,EAA3D;;AAEA;AACAb,aAAWc,aAAX,GAA2BjB,KAAKU,IAAL,CAAUP,WAAWQ,QAArB,EAA+BR,WAAWU,sBAA1C,CAA3B;;AAEA;AACAV,aAAWe,WAAX,GAAyBf,WAAWe,WAAX,IAA2BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAApD,IAAsE,KAA/F;;AAEA,SAAOlB,UAAP;AACD;;AAEDmB,OAAOC,OAAP,GAAiB;AACftB,iBAAeA;AADA,CAAjB","file":"run-config.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\n/**\n * 获取最终的配置数据\n * @param {Object | String} opts 用户传递过来的参数\n * @returns {Object}\n */\nfunction getConfigOpts(opts) {\n  let configOpts;\n\n  try {\n    // opts 如果是字符串则认为是文件路径，可将配置项放在独立的配置文件中\n    if (typeof opts === 'string' && fs.existsSync(opts)) {\n      configOpts = require(opts);\n    } else if (opts && (typeof opts === 'object')) {\n      configOpts = opts;\n    } else {\n      configOpts = null;\n    }\n  } catch (e) {\n    console.error('getConfigOpts catch e:', e);\n  }\n\n  // 必须要存在配置\n  if (!configOpts) {\n    console.error('Could not get configOpts!', opts);\n    return null;\n  }\n\n  // 如果没有 ROOT_PATH，则将无法启动成功\n  if (!configOpts.ROOT_PATH) {\n    console.error('Should define ROOT_PATH!', opts, configOpts);\n    return null;\n  }\n\n  // 设置默认值\n  // 项目源文件的目录，默认值为 ${ROOT_PATH}/src\n  configOpts.SRC_PATH = configOpts.SRC_PATH || path.join(configOpts.ROOT_PATH, './src');\n\n  // 运行目录，由 SRC_PATH 处理之后生成的，默认值为 ${ROOT_PATH}/app\n  configOpts.APP_PATH = configOpts.APP_PATH || path.join(configOpts.ROOT_PATH, './app');\n\n  // 配置数据缓存路径，默认值为 APP_PATH\n  configOpts.DATA_PATH = configOpts.DATA_PATH || configOpts.APP_PATH;\n\n  // handler 文件相对 SRC_PATH 目录的路径，默认值为 './handlers'\n  configOpts.HANDLERS_RELATIVE_PATH = configOpts.HANDLERS_RELATIVE_PATH || './handlers';\n\n  // 日志文件存储的路径，默认值为 ${ROOT_PATH}/logs\n  configOpts.LOG_PATH = configOpts.LOG_PATH || path.join(configOpts.ROOT_PATH, 'logs');\n\n  // matman 启动之后的服务端口号，默认为 3000\n  configOpts.port = configOpts.port || 3000;\n\n  // 外部 handler 列表，比如引入npm包或者其他目录下的 handler\n  configOpts.definedHandlers = configOpts.definedHandlers || [];\n\n  // 确认 HANDLERS_PATH 的值\n  configOpts.HANDLERS_PATH = path.join(configOpts.APP_PATH, configOpts.HANDLERS_RELATIVE_PATH);\n\n  // 是否 watch 文件变动\n  configOpts.shouldWatch = configOpts.shouldWatch || (process.env.NODE_ENV === 'development') || false;\n\n  return configOpts;\n}\n\nmodule.exports = {\n  getConfigOpts: getConfigOpts\n};"]}