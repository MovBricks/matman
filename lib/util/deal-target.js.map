{"version":3,"sources":["../../src/util/deal-target.js"],"names":["fs","require","_","path","marked","file","db","getTargetNameList","targetBasePath","targetNameArr","getAll","globs","forEach","item","isDirectory","push","basename","relativePath","console","error","join","basePath","getTargetListByMatch","jsonFileArr","matchCall","arr","i","length","targetDB","getDB","dbState","getState","getAllMatmanFiles","getTargetConfigDBState","curTargetPath","targetConfigFile","existsSync","getTargetDB","targetDBFile","getTargetDBState","targetName","targetConfigDBState","targetDBState","merge","name","disable","description","activeModule","defaultModule","priority","tags","union","getTargetModules","dealTargetModuleCall","curTargetModulesPath","modules","targetModuleName","targetModuleDBFile","targetModuleData","targetModuleDB","getTargetReadme","targetReadmeFile","setOptions","renderer","Renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","content","readFileSync","replace","e","stack","updateTarget","newState","setState","module","exports"],"mappings":"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","file":"deal-target.js","sourcesContent":["const fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst marked = require('marked');\n\nconst file = require('./file');\nconst db = require('./db');\n\n/**\n * 获取所有的 target 模块名字列表\n * @param {String} targetBasePath 目标的基础路径\n */\nfunction getTargetNameList(targetBasePath) {\n  let targetNameArr = [];\n\n  file.getAll(targetBasePath, { globs: ['*'] }).forEach((item) => {\n    // 限制只处理文件夹类型的\n    if (item.isDirectory()) {\n      targetNameArr.push(path.basename(item.relativePath));\n    } else {\n      console.error(`${path.join(item.basePath, item.relativePath)} SHOULD BE Directory!`)\n    }\n  });\n\n  return targetNameArr;\n}\n\n/**\n * 获取当前的处理对象\n * @param {Array} jsonFileArr db文件的地址数组\n * @param {Function} matchCall 检查函数，接受一个参数dbState\n * @return {Array}\n */\nfunction getTargetListByMatch(jsonFileArr, matchCall) {\n  let arr = [];\n\n  // 循环查找所有的 matman.json 文件，对比 target 字段，可能会有多个匹配\n  for (let i = 0, length = jsonFileArr.length; i < length; i++) {\n    let item = jsonFileArr[i];\n\n    // 获取每个 target 中的 matman.json 文件内容，以便寻找到 target\n    let targetDB = db.getDB(path.join(item.basePath, item.relativePath));\n    let dbState = targetDB.getState();\n    // console.log(dbState);\n\n    // 自定义方法来校验是否是目标对象\n    if (matchCall(dbState)) {\n      arr.push(dbState);\n    }\n  }\n\n  return arr;\n}\n\n/**\n * 获取所有的 matman.json 文件\n *\n * @param {String} targetBasePath 目标的基础路径\n * @return {Array}\n */\nfunction getAllMatmanFiles(targetBasePath) {\n  return file.getAll(targetBasePath, { globs: ['*/matman.json'] });\n}\n\n/**\n * 获取这个 target 模块的 config 信息\n *\n * @param {String} curTargetPath 当前目标路径\n */\nfunction getTargetConfigDBState(curTargetPath) {\n  let targetConfigFile = path.join(curTargetPath, 'config.json');\n\n  // target 的 config.json 可能不存在\n  if (!fs.existsSync(targetConfigFile)) {\n    console.error(targetConfigFile + ' is not exist!');\n    return null;\n  }\n\n  // 获取这个 target 模块的 config 信息\n  return db.getDB(targetConfigFile).getState();\n}\n\n/**\n * 获取这个 target 模块的 config 信息\n *\n * @param {String} curTargetPath 当前目标路径\n */\nfunction getTargetDB(curTargetPath) {\n  let targetDBFile = path.join(curTargetPath, 'matman.json');\n\n  return db.getDB(targetDBFile);\n}\n\n/**\n *\n * @param targetName\n * @param targetDB\n * @param targetConfigDBState\n */\nfunction getTargetDBState(targetName, targetDB, targetConfigDBState) {\n  let targetDBState = _.merge({}, targetDB.getState(), targetConfigDBState);\n\n  targetDBState.name = targetDBState.name || targetName;\n  targetDBState.disable = targetDBState.disable || false;\n  targetDBState.description = targetDBState.description || targetDBState.name;\n  targetDBState.activeModule = targetDBState.activeModule || targetDBState.defaultModule;\n  targetDBState.priority = targetDBState.priority || 0;\n  targetDBState.tags = _.union(['全部'], targetDBState.tags || []);\n\n  return targetDBState;\n}\n\n/**\n * 获取这个 target 的modules列表\n *\n * @param {String} curTargetPath 当前目标路径\n * @param {Function} dealTargetModuleCall 处理函数\n * @return {Array}\n */\nfunction getTargetModules(curTargetPath, dealTargetModuleCall) {\n  let curTargetModulesPath = path.join(curTargetPath, 'result_modules');\n\n  // 获取当前的 target 下的 modules 列表\n  let modules = [];\n\n  file.getAll(curTargetModulesPath, { globs: ['*'] }).forEach((item) => {\n    if (!item.isDirectory()) {\n      console.error('SHOULD BE Directory!', item);\n      return;\n    }\n\n    // 获取模块名\n    let targetModuleName = path.basename(item.relativePath);\n\n    // config.json 的作用是用于用户自定义，拥有最高的优先级\n    let targetModuleDBFile = path.join(curTargetModulesPath, targetModuleName, 'config.json');\n    let targetModuleData;\n\n    if (!fs.existsSync(targetModuleDBFile)) {\n      // config.json不存在，则设置默认值\n      targetModuleData = {};\n    } else {\n      // config.json不存在，则获取这个模块的详细信息\n      let targetModuleDB = db.getDB(targetModuleDBFile);\n\n      targetModuleData = targetModuleDB.getState();\n    }\n\n    targetModuleData.name = targetModuleData.name || targetModuleName;\n    targetModuleData.description = targetModuleData.description || targetModuleName;\n    targetModuleData.priority = targetModuleData.priority || 0;\n\n    // 自定义处理\n    targetModuleData = dealTargetModuleCall(targetModuleData);\n\n    modules.push(targetModuleData);\n  });\n\n  return modules;\n}\n\n/**\n * 获取指定 target 的 README 信息\n */\nfunction getTargetReadme(targetBasePath, targetName) {\n  let curTargetPath = path.join(targetBasePath, targetName);\n\n  let targetReadmeFile = path.join(curTargetPath, 'readme.md');\n  if (!fs.existsSync(targetReadmeFile)) {\n    targetReadmeFile = path.join(curTargetPath, 'readme.MD');\n    if (!fs.existsSync(targetReadmeFile)) {\n      targetReadmeFile = path.join(curTargetPath, 'README.md');\n      if (!fs.existsSync(targetReadmeFile)) {\n        targetReadmeFile = path.join(curTargetPath, 'README.MD');\n        if (!fs.existsSync(targetReadmeFile)) {\n          return '';\n        }\n      }\n    }\n  }\n\n  marked.setOptions({\n    renderer: new marked.Renderer(),\n    gfm: true,\n    tables: true,\n    breaks: false,\n    pedantic: false,\n    sanitize: false,\n    smartLists: true,\n    smartypants: false\n  });\n\n  try {\n    let content = fs.readFileSync(targetReadmeFile, 'utf8');\n\n    content = content.replace(/__MOCKER__/g, targetName);\n\n    return marked(content);\n  } catch (e) {\n    return e.stack;\n  }\n}\n\n/**\n * 更新 target 的 信息\n * @param targetBasePath\n * @param targetName\n * @param newState\n */\nfunction updateTarget(targetBasePath, targetName, newState) {\n  let curTargetPath = path.join(targetBasePath, targetName);\n\n  // 获取这个 target 模块的详细信息\n  let targetDB = getTargetDB(curTargetPath);\n\n  // 更新 target db 数据\n  let targetDBState = targetDB.getState();\n  targetDBState = _.merge({}, targetDBState, newState);\n  targetDB.setState(targetDBState);\n\n  return targetDBState;\n}\n\nmodule.exports = {\n  getTargetNameList: getTargetNameList,\n  getTargetConfigDBState: getTargetConfigDBState,\n  getTargetDB: getTargetDB,\n  getTargetDBState: getTargetDBState,\n  getTargetModules: getTargetModules,\n  getTargetListByMatch: getTargetListByMatch,\n  getTargetReadme: getTargetReadme,\n  updateTarget: updateTarget,\n  getAllMatmanFiles: getAllMatmanFiles\n};\n\n\n"]}