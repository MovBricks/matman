{"version":3,"sources":["../../src/util/request.js"],"names":["_","require","request","Promise","querystring","requestInMock","req","params","requestOpts","resolve","reject","defaultRequestOpts","url","headers","host","method","jar","timeout","opts","requestOptsQs","qs","merge","query","requestOptsForm","form","formValue","_m_from","body","formValueStr","stringify","requestOptsHeaders","headersValue","Buffer","byteLength","error","response","JSON","parse","e","module","exports"],"mappings":";;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,UAAUF,QAAQ,UAAR,CAAhB;AACA,IAAMG,cAAcH,QAAQ,aAAR,CAApB;;AAEA;;;;;;;;AAQA,SAASI,aAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,WAApC,EAAiD;AAC/C,SAAO,IAAIL,OAAJ,CAAY,UAACM,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,qBAAqB;AACzBC,WAAK,YAAYN,IAAIO,OAAJ,CAAYC,IAAxB,GAA+BR,IAAIM,GADf;AAEzBC,eAASP,IAAIO,OAFY;AAGzBE,cAAQT,IAAIS,MAHa;AAIzBC,WAAK,IAJoB;AAKzBC,eAAS;AALgB,KAA3B;;AAQA;;AAEA,QAAIC,aAAJ;;AAEA,QAAIZ,IAAIS,MAAJ,KAAe,KAAnB,EAA0B;AACxB,UAAII,gBAAgBX,YAAYY,EAAhC;;AAEA;AACA,aAAOZ,YAAYY,EAAnB;;AAEAF,aAAOlB,EAAEqB,KAAF,CAAQ,EAAR,EAAYV,kBAAZ,EAAgC;AACrCS,YAAIpB,EAAEqB,KAAF,CAAQ,EAAR,EAAYf,IAAIgB,KAAhB,EAAuBf,MAAvB,EAA+BY,aAA/B;AADiC,OAAhC,EAEJX,WAFI,CAAP;AAGD,KATD,MASO,IAAIF,IAAIS,MAAJ,KAAe,MAAnB,EAA2B;AAChC,UAAIQ,kBAAkBf,YAAYgB,IAAlC;;AAEA;AACA,aAAOhB,YAAYgB,IAAnB;;AAEA,UAAIC,YAAYzB,EAAEqB,KAAF,CAAQ,EAAEK,SAAS,CAAX,EAAR,EAAwBpB,IAAIqB,IAA5B,EAAkCpB,MAAlC,EAA0CgB,eAA1C,CAAhB;;AAEA,UAAIK,eAAexB,YAAYyB,SAAZ,CAAsBJ,SAAtB,CAAnB;;AAEA,UAAIK,qBAAqBtB,YAAYK,OAArC;;AAEA;AACA,aAAOL,YAAYK,OAAnB;;AAEA;AACA,UAAIkB,eAAe/B,EAAEqB,KAAF,CAAQ,EAAR,EAAYf,IAAIO,OAAhB,EAAyB;AAC1C,0BAAkBmB,OAAOC,UAAP,CAAkBL,YAAlB;AADwB,OAAzB,EAEhBE,kBAFgB,CAAnB;;AAIAZ,aAAOlB,EAAEqB,KAAF,CAAQ,EAAR,EAAYV,kBAAZ,EAAgC;AACrCa,cAAMC,SAD+B;AAErCZ,iBAASkB;AAF4B,OAAhC,EAGJvB,WAHI,CAAP;AAID,KAxBM,MAwBA;AACLU,aAAOlB,EAAEqB,KAAF,CAAQ,EAAR,EAAYV,kBAAZ,EAAgCH,WAAhC,CAAP;AACD;;AAED;AACAU,SAAKE,EAAL,GAAUpB,EAAEqB,KAAF,CAAQ,EAAR,EAAYH,KAAKE,EAAjB,EAAqB,EAAEM,SAAS,CAAX,EAArB,CAAV;;AAEA;;AAEAxB,YAAQgB,IAAR,EAAc,UAAUgB,KAAV,EAAiBC,QAAjB,EAA2BR,IAA3B,EAAiC;AAC7C;AACA;AACA;;AAEA,UAAIO,KAAJ,EAAW;AACT,eAAOxB,OAAOwB,KAAP,CAAP;AACD;;AAED,UAAI;AACFzB,gBAAQ2B,KAAKC,KAAL,CAAWV,IAAX,CAAR;AACD,OAFD,CAEE,OAAOW,CAAP,EAAU;AACV5B,eAAO4B,CAAP;AACD;AACF,KAdD;AAeD,GAtEM,CAAP;AAuED;;AAEDC,OAAOC,OAAP,GAAiB;AACfnC,iBAAeA;AADA,CAAjB","file":"request.js","sourcesContent":["const _ = require('lodash');\nconst request = require('request');\nconst Promise = require('bluebird');\nconst querystring = require('querystring');\n\n/**\n * 在mock module中进行请求\n *\n * @param req\n * @param {Object} params 请求参数\n * @param {Object} requestOpts request组件的opts参数\n * @return {Promise}\n */\nfunction requestInMock(req, params, requestOpts) {\n  return new Promise((resolve, reject) => {\n    const defaultRequestOpts = {\n      url: 'http://' + req.headers.host + req.url,\n      headers: req.headers,\n      method: req.method,\n      jar: true,\n      timeout: 4000\n    };\n\n    // 如果服务器返回的是 gzip 内容，则需要设置 gzip=true\n\n    let opts;\n\n    if (req.method === 'GET') {\n      let requestOptsQs = requestOpts.qs;\n\n      // 移除这个字段，避免又被干扰\n      delete requestOpts.qs;\n\n      opts = _.merge({}, defaultRequestOpts, {\n        qs: _.merge({}, req.query, params, requestOptsQs)\n      }, requestOpts);\n    } else if (req.method === 'POST') {\n      let requestOptsForm = requestOpts.form;\n\n      // 移除form这个字段，避免又被干扰\n      delete requestOpts.form;\n\n      let formValue = _.merge({ _m_from: 2 }, req.body, params, requestOptsForm);\n\n      let formValueStr = querystring.stringify(formValue);\n\n      let requestOptsHeaders = requestOpts.headers;\n\n      // 移除headers这个字段，避免又被干扰\n      delete requestOpts.headers;\n\n      // 由于修改了 data，则需要重新设置 content-length 的值\n      let headersValue = _.merge({}, req.headers, {\n        \"content-length\": Buffer.byteLength(formValueStr)\n      }, requestOptsHeaders);\n\n      opts = _.merge({}, defaultRequestOpts, {\n        form: formValue,\n        headers: headersValue,\n      }, requestOpts);\n    } else {\n      opts = _.merge({}, defaultRequestOpts, requestOpts);\n    }\n\n    // 自带一个这个参数，避免循环调用\n    opts.qs = _.merge({}, opts.qs, { _m_from: 2 });\n\n    // console.log('opts:', opts);\n\n    request(opts, function (error, response, body) {\n      // console.log('error:', error);\n      // console.log('statusCode:', response && response.statusCode);\n      // console.log('body:', body);\n\n      if (error) {\n        return reject(error);\n      }\n\n      try {\n        resolve(JSON.parse(body));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  requestInMock: requestInMock,\n};"]}