{"version":3,"sources":["../src/run.js"],"names":["fs","require","path","default","global","Promise","babelCompileDirectory","matmanServer","logger","matmanLogger","attentionLogger","module","exports","opts","configOpts","existsSync","ROOT_PATH","console","error","SRC_PATH","join","APP_PATH","DATA_PATH","HANDLER_RELATIVE_PATH","LOG_PATH","port","definedHandlers","HANDLER_PATH","init","info","routerHandler","app","create","middlewares","handlerServer","use","get","req","res","redirect","imageFilePath","params","handlerName","sendFile","__dirname","connectLogger","bodyParser","next","method","body","createdAt","Date","now","server","_handlerParser","listen","log"],"mappings":"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","file":"run.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\n//rewrite promise, bluebird is more faster\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\nglobal.Promise = require('bluebird');\n\nconst babelCompileDirectory = require('babel-d');\n\nconst matmanServer = require('./server');\n\nconst logger = require('./server/logger');\nconst matmanLogger = logger.matmanLogger();\nconst attentionLogger = logger.attentionLogger();\n\n// 暴露一个全局log变量\nglobal.matmanLogger = matmanLogger;\nglobal.attentionLogger = attentionLogger;\n\nmodule.exports = (opts) => {\n  let configOpts;\n\n  // opts 如果是字符串则认为是文件路径，可将配置项放在独立的配置文件中\n  if (typeof opts === 'string' && fs.existsSync(opts)) {\n    configOpts = require(opts);\n  } else if (typeof opts === 'object') {\n    configOpts = opts;\n  }\n\n  // 如果没有 ROOT_PATH，则将无法启动成功\n  if (!configOpts || !configOpts.ROOT_PATH) {\n    console.error('Invalid param!', opts, configOpts);\n    return;\n  }\n\n  // 设置默认值\n  // 项目源文件的目录，默认值为 ${ROOT_PATH}/src\n  configOpts.SRC_PATH = configOpts.SRC_PATH || path.join(configOpts.ROOT_PATH, './src');\n\n  // 运行目录，由 SRC_PATH 处理之后生成的，默认值为 ${ROOT_PATH}/app\n  configOpts.APP_PATH = configOpts.APP_PATH || path.join(configOpts.ROOT_PATH, './app');\n\n  // 配置数据缓存路径，默认值为 APP_PATH\n  configOpts.DATA_PATH = configOpts.DATA_PATH || configOpts.APP_PATH;\n\n  // handler 文件相对 SRC_PATH 目录的路径，默认值为 './handler'\n  configOpts.HANDLER_RELATIVE_PATH = configOpts.HANDLER_RELATIVE_PATH || './handler';\n\n  // 日志文件存储的路径，默认值为 ${ROOT_PATH}/logs\n  configOpts.LOG_PATH = configOpts.LOG_PATH || path.join(configOpts.ROOT_PATH, 'logs');\n\n  // matman 启动之后的服务端口号，默认为 3000\n  configOpts.port = configOpts.port || 3000;\n\n  // 外部 handler 列表，比如引入npm包或者其他目录下的 handler\n  configOpts.definedHandlers = configOpts.definedHandlers || [];\n\n  // 确认 HANDLER_PATH 的值\n  configOpts.HANDLER_PATH = path.join(configOpts.APP_PATH, configOpts.HANDLER_RELATIVE_PATH);\n\n  // babel 编译\n  babelCompileDirectory(configOpts.SRC_PATH, configOpts.APP_PATH);\n\n  // 启动\n\n  // 初始化日志打印\n  logger.init(configOpts.LOG_PATH);\n  matmanLogger.info(configOpts);\n\n  // 创建服务，并加入 handler 路由\n  const routerHandler = matmanServer.routerHandler(configOpts);\n  const app = matmanServer.create();\n  const middlewares = matmanServer.handlerServer();\n\n  // Set default middlewares (logger, static, cors and no-cache)\n  app.use(middlewares);\n\n  // GET /admin，跳转到 /\n  app.get('/admin', function (req, res) {\n    res.redirect('/');\n  });\n\n  // GET /admin/handlers/handler/:handlerName/static/* 静态资源\n  // http://localhost:3000/admin/handlers/handler/standard_cgi/static/1.png\n  app.get('/admin/handlers/handler/:handlerName/static/*', (req, res) => {\n    // req.params[0] = 'subdir/3.png'\n    // req.params.handlerName = 'standard_cgi'\n    let imageFilePath = path.join(configOpts.HANDLER_PATH, req.params.handlerName, 'static', req.params[0]);\n    res.sendFile(imageFilePath);\n  });\n\n  // GET /admin/*\n  app.get('/admin/*', function (req, res) {\n    // res.jsonp({ url2: req.url });\n    res.sendFile(path.join(__dirname, '../www/static', 'index.html'));\n  });\n\n  app.use(logger.connectLogger());\n\n  // To handle POST, PUT and PATCH you need to use a body-parser\n  // You can use the one used by JSON Server\n  app.use(matmanServer.bodyParser);\n  app.use((req, res, next) => {\n    if (req.method === 'POST') {\n      req.body.createdAt = Date.now();\n    }\n    // Continue to JSON Server router\n    next();\n  });\n\n  // Use handler router\n  app.use(routerHandler);\n\n  // 触发 onBeforeServerListen 事件\n  const server = require('./plugins/stub/websocket')(configOpts, app, routerHandler._handlerParser);\n\n  server.listen(configOpts.port || 3000, () => {\n    console.log('matman server is running');\n    matmanLogger.info('matman server is running');\n  });\n};"]}