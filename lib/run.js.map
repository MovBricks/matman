{"version":3,"sources":["../src/run.js"],"names":["fs","require","path","matmanServer","logger","matmanLog","module","exports","opts","configOpts","existsSync","console","log","ROOT_PATH","MOCKER_PATH","error","routerMocker","server","create","middlewares","mockServer","use","get","req","res","redirect","sendFile","join","__dirname","connectLogger","bodyParser","next","method","body","createdAt","Date","now","listen","port","info"],"mappings":";;;;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,IAAME,eAAeF,QAAQ,UAAR,CAArB;;AAEA,IAAMG,SAASH,QAAQ,iBAAR,CAAf;AACA,IAAMI,YAAYD,OAAOC,SAAP,EAAlB;;AAEAC,OAAOC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAIC,mBAAJ;;AAEA,MAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BR,GAAGU,UAAH,CAAcF,IAAd,CAAhC,EAAqD;AACnDC,iBAAaR,QAAQO,IAAR,CAAb;AACD,GAFD,MAEO,IAAI,QAAOA,IAAP,uDAAOA,IAAP,OAAgB,QAApB,EAA8B;AACnCC,iBAAaD,IAAb;AACD;;AAEDG,UAAQC,GAAR,CAAYH,UAAZ;;AAEA,MAAI,CAACA,UAAD,IAAe,CAACA,WAAWI,SAA3B,IAAwC,CAACJ,WAAWK,WAAxD,EAAqE;AACnEH,YAAQI,KAAR,CAAc,eAAd,EAA+BP,IAA/B;AACA;AACD;;AAED,MAAMQ,eAAeb,aAAaa,YAAb,CAA0BP,UAA1B,CAArB;AACA,MAAMQ,SAASd,aAAae,MAAb,EAAf;AACA,MAAMC,cAAchB,aAAaiB,UAAb,EAApB;;AAEA;AACAH,SAAOI,GAAP,CAAWF,WAAX;;AAEA;AACAF,SAAOK,GAAP,CAAW,QAAX,EAAqB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvCA,QAAIC,QAAJ,CAAa,GAAb;AACD,GAFD;;AAIA;AACAR,SAAOK,GAAP,CAAW,UAAX,EAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACzC;AACAA,QAAIE,QAAJ,CAAaxB,KAAKyB,IAAL,CAAUC,SAAV,EAAqB,eAArB,EAAsC,YAAtC,CAAb;AACD,GAHD;;AAKAX,SAAOI,GAAP,CAAWjB,OAAOyB,aAAP,CAAqBpB,UAArB,CAAX;;AAEA;AACA;AACAQ,SAAOI,GAAP,CAAWlB,aAAa2B,UAAxB;AACAb,SAAOI,GAAP,CAAW,UAACE,GAAD,EAAMC,GAAN,EAAWO,IAAX,EAAoB;AAC7B,QAAIR,IAAIS,MAAJ,KAAe,MAAnB,EAA2B;AACzBT,UAAIU,IAAJ,CAASC,SAAT,GAAqBC,KAAKC,GAAL,EAArB;AACD;AACD;AACAL;AACD,GAND;;AAQA;AACAd,SAAOI,GAAP,CAAWL,YAAX;;AAEAC,SAAOoB,MAAP,CAAc5B,WAAW6B,IAAX,IAAmB,IAAjC,EAAuC,YAAM;AAC3C3B,YAAQC,GAAR,CAAY,0BAAZ;AACAP,cAAUkC,IAAV,CAAe,0BAAf;AACD,GAHD;AAID,CAtDD","file":"run.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nconst matmanServer = require('./server');\n\nconst logger = require('./server/logger');\nconst matmanLog = logger.matmanLog();\n\nmodule.exports = (opts) => {\n  let configOpts;\n\n  if (typeof opts === 'string' && fs.existsSync(opts)) {\n    configOpts = require(opts);\n  } else if (typeof opts === 'object') {\n    configOpts = opts;\n  }\n\n  console.log(configOpts)\n\n  if (!configOpts || !configOpts.ROOT_PATH || !configOpts.MOCKER_PATH) {\n    console.error('Params error!', opts);\n    return;\n  }\n\n  const routerMocker = matmanServer.routerMocker(configOpts);\n  const server = matmanServer.create();\n  const middlewares = matmanServer.mockServer();\n\n  // Set default middlewares (logger, static, cors and no-cache)\n  server.use(middlewares);\n\n  // GET /admin，跳转到 /\n  server.get('/admin', function (req, res) {\n    res.redirect('/');\n  });\n\n  // GET /admin/*\n  server.get('/admin/*', function (req, res) {\n    // res.jsonp({ url2: req.url });\n    res.sendFile(path.join(__dirname, '../www/static', 'index.html'));\n  });\n\n  server.use(logger.connectLogger(configOpts));\n\n  // To handle POST, PUT and PATCH you need to use a body-parser\n  // You can use the one used by JSON Server\n  server.use(matmanServer.bodyParser);\n  server.use((req, res, next) => {\n    if (req.method === 'POST') {\n      req.body.createdAt = Date.now()\n    }\n    // Continue to JSON Server router\n    next();\n  });\n\n  // Use default router\n  server.use(routerMocker);\n\n  server.listen(configOpts.port || 3000, () => {\n    console.log('matman server is running');\n    matmanLog.info('matman server is running');\n  });\n};"]}