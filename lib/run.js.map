{"version":3,"sources":["../src/run.js"],"names":["fs","require","path","babelCompileDirectory","matmanServer","logger","matmanLog","module","exports","opts","configOpts","existsSync","console","log","ROOT_PATH","error","SRC_PATH","join","APP_PATH","MOCKER_RELATIVE_PATH","LOG_PATH","port","MOCKER_PATH","routerMocker","server","create","middlewares","mockServer","use","get","req","res","redirect","sendFile","__dirname","connectLogger","bodyParser","next","method","body","createdAt","Date","now","listen","info"],"mappings":"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","file":"run.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst babelCompileDirectory = require('babel-d');\n\nconst matmanServer = require('./server');\n\nconst logger = require('./server/logger');\nconst matmanLog = logger.matmanLog();\n\nmodule.exports = (opts) => {\n  let configOpts;\n\n  if (typeof opts === 'string' && fs.existsSync(opts)) {\n    configOpts = require(opts);\n  } else if (typeof opts === 'object') {\n    configOpts = opts;\n  }\n\n  console.log(configOpts)\n\n  if (!configOpts || !configOpts.ROOT_PATH) {\n    console.error('Params error!', opts, configOpts);\n    return;\n  }\n\n  // 设置默认值\n  configOpts.SRC_PATH = configOpts.SRC_PATH || path.join(configOpts.ROOT_PATH, './src');\n  configOpts.APP_PATH = configOpts.APP_PATH || path.join(configOpts.ROOT_PATH, './lib');\n  configOpts.MOCKER_RELATIVE_PATH = configOpts.MOCKER_RELATIVE_PATH || './mocker';\n  configOpts.LOG_PATH = configOpts.LOG_PATH || path.join(configOpts.ROOT_PATH, 'logs');\n  configOpts.port = configOpts.port || 3000;\n\n  // 确认 MOCKER_PATH 的值\n  if (configOpts.SRC_PATH === configOpts.APP_PATH) {\n    // 如果源文件目录和运行目录一致，就不进行babel编译了\n    configOpts.MOCKER_PATH = path.join(configOpts.SRC_PATH, configOpts.MOCKER_RELATIVE_PATH);\n  } else {\n    // babel 编译\n    babelCompileDirectory(configOpts.SRC_PATH, configOpts.APP_PATH);\n    configOpts.MOCKER_PATH = path.join(configOpts.APP_PATH, configOpts.MOCKER_RELATIVE_PATH);\n  }\n\n  const routerMocker = matmanServer.routerMocker(configOpts);\n  const server = matmanServer.create();\n  const middlewares = matmanServer.mockServer();\n\n  // Set default middlewares (logger, static, cors and no-cache)\n  server.use(middlewares);\n\n  // GET /admin，跳转到 /\n  server.get('/admin', function (req, res) {\n    res.redirect('/');\n  });\n\n  // GET /admin/*\n  server.get('/admin/*', function (req, res) {\n    // res.jsonp({ url2: req.url });\n    res.sendFile(path.join(__dirname, '../www/static', 'index.html'));\n  });\n\n  server.use(logger.connectLogger(configOpts));\n\n  // To handle POST, PUT and PATCH you need to use a body-parser\n  // You can use the one used by JSON Server\n  server.use(matmanServer.bodyParser);\n  server.use((req, res, next) => {\n    if (req.method === 'POST') {\n      req.body.createdAt = Date.now()\n    }\n    // Continue to JSON Server router\n    next();\n  });\n\n  // Use default router\n  server.use(routerMocker);\n\n  server.listen(configOpts.port || 3000, () => {\n    console.log('matman server is running');\n    matmanLog.info('matman server is running');\n  });\n};"]}