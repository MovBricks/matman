{"version":3,"sources":["../src/run.js"],"names":["fs","require","path","default","global","Promise","babelCompileDirectory","matmanServer","logger","matmanLog","module","exports","opts","configOpts","existsSync","ROOT_PATH","console","error","SRC_PATH","join","APP_PATH","MOCKER_RELATIVE_PATH","LOG_PATH","port","MOCKER_PATH","info","routerMocker","server","create","middlewares","mockServer","use","get","req","res","redirect","imageFilePath","params","mockerName","sendfile","sendFile","__dirname","connectLogger","bodyParser","next","method","body","createdAt","Date","now","listen","log"],"mappings":"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","file":"run.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\n//rewrite promise, bluebird is more faster\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\nglobal.Promise = require('bluebird');\n\nconst babelCompileDirectory = require('babel-d');\n\nconst matmanServer = require('./server');\n\nconst logger = require('./server/logger');\nconst matmanLog = logger.matmanLog();\n\nmodule.exports = (opts) => {\n  let configOpts;\n\n  if (typeof opts === 'string' && fs.existsSync(opts)) {\n    configOpts = require(opts);\n  } else if (typeof opts === 'object') {\n    configOpts = opts;\n  }\n\n  if (!configOpts || !configOpts.ROOT_PATH) {\n    console.error('Params error!', opts, configOpts);\n    return;\n  }\n\n  // 设置默认值\n  configOpts.SRC_PATH = configOpts.SRC_PATH || path.join(configOpts.ROOT_PATH, './src');\n  configOpts.APP_PATH = configOpts.APP_PATH || path.join(configOpts.ROOT_PATH, './app');\n  configOpts.MOCKER_RELATIVE_PATH = configOpts.MOCKER_RELATIVE_PATH || './mocker';\n  configOpts.LOG_PATH = configOpts.LOG_PATH || path.join(configOpts.ROOT_PATH, 'logs');\n  configOpts.port = configOpts.port || 3000;\n\n  // 确认 MOCKER_PATH 的值\n  if (configOpts.SRC_PATH === configOpts.APP_PATH) {\n    // 如果源文件目录和运行目录一致，就不进行babel编译了\n    configOpts.MOCKER_PATH = path.join(configOpts.SRC_PATH, configOpts.MOCKER_RELATIVE_PATH);\n  } else {\n    // babel 编译\n    babelCompileDirectory(configOpts.SRC_PATH, configOpts.APP_PATH);\n    configOpts.MOCKER_PATH = path.join(configOpts.APP_PATH, configOpts.MOCKER_RELATIVE_PATH);\n  }\n\n  matmanLog.info(configOpts);\n\n  const routerMocker = matmanServer.routerMocker(configOpts);\n  const server = matmanServer.create();\n  const middlewares = matmanServer.mockServer();\n\n  // Set default middlewares (logger, static, cors and no-cache)\n  server.use(middlewares);\n\n  // GET /admin，跳转到 /\n  server.get('/admin', function (req, res) {\n    res.redirect('/');\n  });\n\n  // GET /admin/mockers/mocker/:mockerName/static/* 静态资源\n  // http://localhost:3000/admin/mockers/mocker/standard_cgi/static/1.png\n  server.get('/admin/mockers/mocker/:mockerName/static/*', (req, res) => {\n    // req.params[0] = 'subdir/3.png'\n    // req.params.mockerName = 'standard_cgi'\n    let imageFilePath = path.join(configOpts.MOCKER_PATH, req.params.mockerName, 'static', req.params[0]);\n    res.sendfile(imageFilePath);\n  });\n\n  // GET /admin/*\n  server.get('/admin/*', function (req, res) {\n    // res.jsonp({ url2: req.url });\n    res.sendFile(path.join(__dirname, '../www/static', 'index.html'));\n  });\n\n  server.use(logger.connectLogger(configOpts));\n\n  // To handle POST, PUT and PATCH you need to use a body-parser\n  // You can use the one used by JSON Server\n  server.use(matmanServer.bodyParser);\n  server.use((req, res, next) => {\n    if (req.method === 'POST') {\n      req.body.createdAt = Date.now()\n    }\n    // Continue to JSON Server router\n    next();\n  });\n\n  // Use default router\n  server.use(routerMocker);\n\n  server.listen(configOpts.port || 3000, () => {\n    console.log('matman server is running');\n    matmanLog.info('matman server is running');\n  });\n};"]}