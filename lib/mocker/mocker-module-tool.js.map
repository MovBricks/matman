{"version":3,"sources":["../../src/mocker/mocker-module-tool.js"],"names":["path","require","fse","save","srcPath","savePath","resolve","reject","getResult","then","saveData","saveJSON","data","catch","err","outputJsonAsync","filePath","params","req","saveTarget","requireModule","saveObj","isPromiseObj","result","default","obj","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,MAAMD,QAAQ,aAAR,CAAZ;;AAEA;;;;;;;AAOA,SAASE,IAAT,CAAcC,OAAd,EAAuBC,QAAvB,EAAiC;AAC/B,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,cAAUJ,OAAV,EACGK,IADH,CACQ,UAACC,QAAD,EAAc;AAClBC,eAASD,QAAT,EAAmBL,QAAnB,EACGI,IADH,CACQ,UAACG,IAAD,EAAU;AACdN,gBAAQM,IAAR;AACD,OAHH,EAIGC,KAJH,CAIS,UAACC,GAAD,EAAS;AACdP,eAAOO,GAAP;AACD,OANH;AAOD,KATH,EAUGD,KAVH,CAUS,UAACC,GAAD,EAAS;AACdP,aAAOO,GAAP;AACD,KAZH;AAaD,GAdM,CAAP;AAeD;;AAED;;;;;;;AAOA,SAASH,QAAT,CAAkBC,IAAlB,EAAwBP,QAAxB,EAAkC;AAChC,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,QAAIa,eAAJ,CAAoBf,KAAKM,OAAL,CAAaD,QAAb,CAApB,EAA4CO,IAA5C,EACGH,IADH,CACQ,YAAM;AACVH,cAAQM,IAAR;AACD,KAHH,EAIGC,KAJH,CAIS,UAACC,GAAD,EAAS;AACdP,aAAOO,GAAP;AACD,KANH;AAOD,GARM,CAAP;AASD;;AAED;;;;;;;;;AASA,SAASN,SAAT,CAAmBQ,QAAnB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0C;AACxC,SAAO,sBAAY,UAACZ,OAAD,EAAUC,MAAV,EAAqB;AACtC;;;;AAIA,QAAIY,aAAaC,cAAcJ,QAAd,CAAjB;;AAEA,QAAI,OAAOG,UAAP,KAAsB,UAA1B,EAAsC;AACpC;AACA,UAAIE,UAAUF,WAAWF,MAAX,EAAmBC,GAAnB,CAAd;;AAEA,UAAII,aAAaD,OAAb,CAAJ,EAA2B;AACzB;AACAA,gBACGZ,IADH,CACQ,UAACG,IAAD,EAAU;AACdN,kBAAQM,IAAR;AACD,SAHH,EAIGC,KAJH,CAIS,UAACC,GAAD,EAAS;AACdP,iBAAOO,GAAP;AACD,SANH;AAOD,OATD,MASO;AACL;AACAR,gBAAQe,OAAR;AACD;AACF,KAjBD,MAiBO,IAAIC,aAAaH,UAAb,CAAJ,EAA8B;AACnC;AACAA,iBACGV,IADH,CACQ,UAACG,IAAD,EAAU;AACdN,gBAAQM,IAAR;AACD,OAHH,EAIGC,KAJH,CAIS,UAACC,GAAD,EAAS;AACdP,eAAOO,GAAP;AACD,OANH;AAOD,KATM,MASA;AACL;AACAR,cAAQa,UAAR;AACD;AACF,GArCM,CAAP;AAsCD;;AAED;;;;;;AAMA,SAASC,aAAT,CAAuBJ,QAAvB,EAAiC;AAC/B,MAAIO,SAAStB,QAAQD,KAAKM,OAAL,CAAaU,QAAb,CAAR,CAAb;;AAEA;AACA;AACA,MAAI,OAAOO,OAAOC,OAAd,KAA0B,WAA9B,EAA2C;AACzCD,aAASA,OAAOC,OAAhB;AACD;;AAED,SAAOD,MAAP;AACD;;AAED;;;;;;AAMA,SAASD,YAAT,CAAsBG,GAAtB,EAA2B;AACzB,SAAOA,OAAQ,OAAOA,IAAIhB,IAAX,KAAoB,UAAnC;AACD;;AAEDiB,OAAOC,OAAP,GAAiB;AACfxB,QAAMA,IADS;AAEfQ,YAAUA,QAFK;AAGfH,aAAWA;AAHI,CAAjB","file":"mocker-module-tool.js","sourcesContent":["const path = require('path');\nconst fse = require('../util/fse');\n\n/**\n * 通过文件路径，将 mocker_modules 模块的结果保存为json文件。\n *\n * @param {String} srcPath 源文件的路径\n * @param {String} savePath 保存路径\n * @return {Promise}\n */\nfunction save(srcPath, savePath) {\n  return new Promise((resolve, reject) => {\n    getResult(srcPath)\n      .then((saveData) => {\n        saveJSON(saveData, savePath)\n          .then((data) => {\n            resolve(data);\n          })\n          .catch((err) => {\n            reject(err);\n          });\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n}\n\n/**\n * 将 JSON 格式的对象保存为json文件。\n *\n * @param {Object} data 对象，plain object\n * @param {String} savePath 保存路径\n * @return {Promise}\n */\nfunction saveJSON(data, savePath) {\n  return new Promise((resolve, reject) => {\n    fse.outputJsonAsync(path.resolve(savePath), data)\n      .then(() => {\n        resolve(data);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n}\n\n/**\n * 通过文件路径获得将 mocker_modules 模块的结果对象\n *\n * @param {String} filePath 文件路径\n * @param {Object} [params] 透传的参数，如果mock module为函数的话，则它将作为函数的第一个参数\n * @param {Object} [req] express中的req对象，，如果mock module为函数的话，则它将作为函数的第二个参数\n *\n * @return {Promise}\n */\nfunction getResult(filePath, params, req) {\n  return new Promise((resolve, reject) => {\n    /**\n     * require mocker modules 之后的对象\n     * @type {Object | Function | Promise}\n     */\n    let saveTarget = requireModule(filePath);\n\n    if (typeof saveTarget === 'function') {\n      // 如果传入的是方法，则执行方法\n      let saveObj = saveTarget(params, req);\n\n      if (isPromiseObj(saveObj)) {\n        // 获得了方法执行的结果之后，判断返回的为 Promise 的话则获取最终结果值\n        saveObj\n          .then((data) => {\n            resolve(data);\n          })\n          .catch((err) => {\n            reject(err);\n          });\n      } else {\n        // 如果方法返回的是普通对象，则直接返回\n        resolve(saveObj);\n      }\n    } else if (isPromiseObj(saveTarget)) {\n      // 如果传入的为 Promise 的话则获取最终结果值\n      saveTarget\n        .then((data) => {\n          resolve(data);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    } else {\n      // 如果传入的是普通对象，则直接返回\n      resolve(saveTarget);\n    }\n  });\n}\n\n/**\n * require mocker module 文件，并将结果返回\n *\n * @param {String} filePath 文件路径\n * @return {Object}\n */\nfunction requireModule(filePath) {\n  let result = require(path.resolve(filePath));\n\n  // 如果是es6写法 export default xxx，则编译之后的值会存储在result.default中\n  // 因此在这种情况下实际返回的时候，只需要返回 result.default 即可\n  if (typeof result.default !== 'undefined') {\n    result = result.default;\n  }\n\n  return result;\n}\n\n/**\n * 判断是否为 Promise 对象值，这种判断方式大部分情况下是没问题的\n *\n * @param {Object} obj 对象\n * @return {Boolean}\n */\nfunction isPromiseObj(obj) {\n  return obj && (typeof obj.then === 'function');\n}\n\nmodule.exports = {\n  save: save,\n  saveJSON: saveJSON,\n  getResult: getResult\n};"]}